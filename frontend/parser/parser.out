Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> empty
Rule 3     program -> program function
Rule 4     type -> Int
Rule 5     function -> type Identifier LParen parameterlist RParen Semi
Rule 6     function -> type Identifier LParen parameterlist RParen LBrace block RBrace
Rule 7     parameterlist -> empty
Rule 8     parameterlist -> parameter
Rule 9     parameterlist -> parameterlist Comma parameter
Rule 10    parameter -> type Identifier
Rule 11    expressionlist -> empty
Rule 12    expressionlist -> expression
Rule 13    expressionlist -> expressionlist Comma expression
Rule 14    block -> block block_item
Rule 15    block -> empty
Rule 16    block_item -> statement
Rule 17    block_item -> declaration Semi
Rule 18    statement -> statement_matched
Rule 19    statement -> statement_unmatched
Rule 20    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 21    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 22    statement_unmatched -> If LParen expression RParen statement
Rule 23    statement_matched -> While LParen expression RParen statement_matched
Rule 24    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 25    statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched
Rule 26    statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched
Rule 27    statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched
Rule 28    statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched
Rule 29    statement_matched -> For LParen Semi expression Semi expression RParen statement_matched
Rule 30    statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched
Rule 31    statement_matched -> For LParen expression Semi Semi expression RParen statement_matched
Rule 32    statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched
Rule 33    statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched
Rule 34    statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched
Rule 35    statement_matched -> For LParen expression Semi expression Semi RParen statement_matched
Rule 36    statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched
Rule 37    statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched
Rule 38    statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched
Rule 39    statement_matched -> For LParen expression Semi Semi RParen statement_matched
Rule 40    statement_matched -> For LParen declaration Semi Semi RParen statement_matched
Rule 41    statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched
Rule 42    statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched
Rule 43    statement_matched -> For LParen Semi expression Semi RParen statement_matched
Rule 44    statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched
Rule 45    statement_matched -> For LParen Semi Semi expression RParen statement_matched
Rule 46    statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched
Rule 47    statement_matched -> For LParen Semi Semi RParen statement_matched
Rule 48    statement_unmatched -> For LParen Semi Semi RParen statement_unmatched
Rule 49    statement_matched -> Do statement_matched While LParen expression RParen Semi
Rule 50    statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi
Rule 51    statement_matched -> Return expression Semi
Rule 52    statement_matched -> opt_expression Semi
Rule 53    statement_matched -> LBrace block RBrace
Rule 54    statement_matched -> Break Semi
Rule 55    statement_matched -> Continue Semi
Rule 56    opt_expression -> expression
Rule 57    opt_expression -> empty
Rule 58    declaration -> type Identifier
Rule 59    declaration -> type Identifier Assign expression
Rule 60    expression -> assignment
Rule 61    assignment -> conditional
Rule 62    conditional -> logical_or
Rule 63    logical_or -> logical_and
Rule 64    logical_and -> bit_or
Rule 65    bit_or -> xor
Rule 66    xor -> bit_and
Rule 67    bit_and -> equality
Rule 68    equality -> relational
Rule 69    relational -> additive
Rule 70    additive -> multiplicative
Rule 71    multiplicative -> unary
Rule 72    unary -> postfix
Rule 73    postfix -> primary
Rule 74    postfix -> Identifier LParen expressionlist RParen
Rule 75    unary -> Minus unary
Rule 76    unary -> BitNot unary
Rule 77    unary -> Not unary
Rule 78    assignment -> Identifier Assign expression
Rule 79    logical_or -> logical_or Or logical_and
Rule 80    logical_and -> logical_and And bit_or
Rule 81    bit_or -> bit_or BitOr xor
Rule 82    xor -> xor Xor bit_and
Rule 83    bit_and -> bit_and BitAnd equality
Rule 84    equality -> equality NotEqual relational
Rule 85    equality -> equality Equal relational
Rule 86    relational -> relational Less additive
Rule 87    relational -> relational Greater additive
Rule 88    relational -> relational LessEqual additive
Rule 89    relational -> relational GreaterEqual additive
Rule 90    additive -> additive Plus multiplicative
Rule 91    additive -> additive Minus multiplicative
Rule 92    multiplicative -> multiplicative Mul unary
Rule 93    multiplicative -> multiplicative Div unary
Rule 94    multiplicative -> multiplicative Mod unary
Rule 95    conditional -> logical_or Question expression Colon conditional
Rule 96    primary -> Integer
Rule 97    primary -> Identifier
Rule 98    primary -> LParen expression RParen

Terminals, with rules where they appear

And                  : 80
Assign               : 59 78
BitAnd               : 83
BitNot               : 76
BitOr                : 81
Break                : 54
Colon                : 95
Comma                : 9 13
Continue             : 55
Div                  : 93
Do                   : 49 50
Else                 : 20 21
Equal                : 85
For                  : 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48
Greater              : 87
GreaterEqual         : 89
Identifier           : 5 6 10 58 59 74 78 97
If                   : 20 21 22
Int                  : 4
Integer              : 96
LBrace               : 6 53
LParen               : 5 6 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 74 98
Less                 : 86
LessEqual            : 88
Minus                : 75 91
Mod                  : 94
Mul                  : 92
Not                  : 77
NotEqual             : 84
Or                   : 79
Plus                 : 90
Question             : 95
RBrace               : 6 53
RParen               : 5 6 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 74 98
Return               : 51
Semi                 : 5 17 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 50 51 52 54 55
While                : 23 24 49 50
Xor                  : 82
error                : 

Nonterminals, with rules where they appear

additive             : 69 86 87 88 89 90 91
assignment           : 60
bit_and              : 66 82 83
bit_or               : 64 80 81
block                : 6 14 53
block_item           : 14
conditional          : 61 95
declaration          : 17 26 28 32 34 36 38 40 42
empty                : 2 7 11 15 57
equality             : 67 83 84 85
expression           : 12 13 20 21 22 23 24 25 25 25 26 26 27 27 27 28 28 29 29 30 30 31 31 32 33 33 34 35 35 36 37 37 38 39 41 43 44 45 46 49 50 51 56 59 78 95 98
expressionlist       : 13 74
function             : 3
logical_and          : 63 79 80
logical_or           : 62 79 95
multiplicative       : 70 90 91 92 93 94
opt_expression       : 52
parameter            : 8 9
parameterlist        : 5 6 9
postfix              : 72
primary              : 73
program              : 3 0
relational           : 68 84 85 86 87 88 89
statement            : 16 22
statement_matched    : 18 20 20 21 23 25 26 29 31 32 35 36 39 40 43 45 47 49
statement_unmatched  : 19 21 24 27 28 30 33 34 37 38 41 42 44 46 48 50
type                 : 5 6 10 58 59
unary                : 71 75 76 77 92 93 94
xor                  : 65 81 82

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . empty
    (3) program -> . program function
    (1) empty -> .

    Int             reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)

    program                        shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> program .
    (3) program -> program . function
    (5) function -> . type Identifier LParen parameterlist RParen Semi
    (6) function -> . type Identifier LParen parameterlist RParen LBrace block RBrace
    (4) type -> . Int

    Int             shift and go to state 5

    function                       shift and go to state 3
    type                           shift and go to state 4

state 2

    (2) program -> empty .

    Int             reduce using rule 2 (program -> empty .)
    $end            reduce using rule 2 (program -> empty .)


state 3

    (3) program -> program function .

    Int             reduce using rule 3 (program -> program function .)
    $end            reduce using rule 3 (program -> program function .)


state 4

    (5) function -> type . Identifier LParen parameterlist RParen Semi
    (6) function -> type . Identifier LParen parameterlist RParen LBrace block RBrace

    Identifier      shift and go to state 6


state 5

    (4) type -> Int .

    Identifier      reduce using rule 4 (type -> Int .)


state 6

    (5) function -> type Identifier . LParen parameterlist RParen Semi
    (6) function -> type Identifier . LParen parameterlist RParen LBrace block RBrace

    LParen          shift and go to state 7


state 7

    (5) function -> type Identifier LParen . parameterlist RParen Semi
    (6) function -> type Identifier LParen . parameterlist RParen LBrace block RBrace
    (7) parameterlist -> . empty
    (8) parameterlist -> . parameter
    (9) parameterlist -> . parameterlist Comma parameter
    (1) empty -> .
    (10) parameter -> . type Identifier
    (4) type -> . Int

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Int             shift and go to state 5

    type                           shift and go to state 8
    parameterlist                  shift and go to state 9
    empty                          shift and go to state 10
    parameter                      shift and go to state 11

state 8

    (10) parameter -> type . Identifier

    Identifier      shift and go to state 12


state 9

    (5) function -> type Identifier LParen parameterlist . RParen Semi
    (6) function -> type Identifier LParen parameterlist . RParen LBrace block RBrace
    (9) parameterlist -> parameterlist . Comma parameter

    RParen          shift and go to state 13
    Comma           shift and go to state 14


state 10

    (7) parameterlist -> empty .

    RParen          reduce using rule 7 (parameterlist -> empty .)
    Comma           reduce using rule 7 (parameterlist -> empty .)


state 11

    (8) parameterlist -> parameter .

    RParen          reduce using rule 8 (parameterlist -> parameter .)
    Comma           reduce using rule 8 (parameterlist -> parameter .)


state 12

    (10) parameter -> type Identifier .

    RParen          reduce using rule 10 (parameter -> type Identifier .)
    Comma           reduce using rule 10 (parameter -> type Identifier .)


state 13

    (5) function -> type Identifier LParen parameterlist RParen . Semi
    (6) function -> type Identifier LParen parameterlist RParen . LBrace block RBrace

    Semi            shift and go to state 15
    LBrace          shift and go to state 16


state 14

    (9) parameterlist -> parameterlist Comma . parameter
    (10) parameter -> . type Identifier
    (4) type -> . Int

    Int             shift and go to state 5

    parameter                      shift and go to state 17
    type                           shift and go to state 8

state 15

    (5) function -> type Identifier LParen parameterlist RParen Semi .

    Int             reduce using rule 5 (function -> type Identifier LParen parameterlist RParen Semi .)
    $end            reduce using rule 5 (function -> type Identifier LParen parameterlist RParen Semi .)


state 16

    (6) function -> type Identifier LParen parameterlist RParen LBrace . block RBrace
    (14) block -> . block block_item
    (15) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 18
    empty                          shift and go to state 19

state 17

    (9) parameterlist -> parameterlist Comma parameter .

    RParen          reduce using rule 9 (parameterlist -> parameterlist Comma parameter .)
    Comma           reduce using rule 9 (parameterlist -> parameterlist Comma parameter .)


state 18

    (6) function -> type Identifier LParen parameterlist RParen LBrace block . RBrace
    (14) block -> block . block_item
    (16) block_item -> . statement
    (17) block_item -> . declaration Semi
    (18) statement -> . statement_matched
    (19) statement -> . statement_unmatched
    (58) declaration -> . type Identifier
    (59) declaration -> . type Identifier Assign expression
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (4) type -> . Int
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RBrace          shift and go to state 24
    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Int             shift and go to state 5
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    type                           shift and go to state 20
    block_item                     shift and go to state 25
    statement                      shift and go to state 26
    declaration                    shift and go to state 27
    statement_matched              shift and go to state 28
    statement_unmatched            shift and go to state 29
    expression                     shift and go to state 30
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 19

    (15) block -> empty .

    RBrace          reduce using rule 15 (block -> empty .)
    If              reduce using rule 15 (block -> empty .)
    While           reduce using rule 15 (block -> empty .)
    For             reduce using rule 15 (block -> empty .)
    Do              reduce using rule 15 (block -> empty .)
    Return          reduce using rule 15 (block -> empty .)
    LBrace          reduce using rule 15 (block -> empty .)
    Break           reduce using rule 15 (block -> empty .)
    Continue        reduce using rule 15 (block -> empty .)
    Int             reduce using rule 15 (block -> empty .)
    Identifier      reduce using rule 15 (block -> empty .)
    Minus           reduce using rule 15 (block -> empty .)
    BitNot          reduce using rule 15 (block -> empty .)
    Not             reduce using rule 15 (block -> empty .)
    Integer         reduce using rule 15 (block -> empty .)
    LParen          reduce using rule 15 (block -> empty .)
    Semi            reduce using rule 15 (block -> empty .)


state 20

    (58) declaration -> type . Identifier
    (59) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 58


state 21

    (78) assignment -> Identifier . Assign expression
    (74) postfix -> Identifier . LParen expressionlist RParen
    (97) primary -> Identifier .

    Assign          shift and go to state 59
    LParen          shift and go to state 60
    Mul             reduce using rule 97 (primary -> Identifier .)
    Div             reduce using rule 97 (primary -> Identifier .)
    Mod             reduce using rule 97 (primary -> Identifier .)
    Plus            reduce using rule 97 (primary -> Identifier .)
    Minus           reduce using rule 97 (primary -> Identifier .)
    Less            reduce using rule 97 (primary -> Identifier .)
    Greater         reduce using rule 97 (primary -> Identifier .)
    LessEqual       reduce using rule 97 (primary -> Identifier .)
    GreaterEqual    reduce using rule 97 (primary -> Identifier .)
    NotEqual        reduce using rule 97 (primary -> Identifier .)
    Equal           reduce using rule 97 (primary -> Identifier .)
    BitAnd          reduce using rule 97 (primary -> Identifier .)
    Xor             reduce using rule 97 (primary -> Identifier .)
    BitOr           reduce using rule 97 (primary -> Identifier .)
    And             reduce using rule 97 (primary -> Identifier .)
    Question        reduce using rule 97 (primary -> Identifier .)
    Or              reduce using rule 97 (primary -> Identifier .)
    Semi            reduce using rule 97 (primary -> Identifier .)
    RParen          reduce using rule 97 (primary -> Identifier .)
    Comma           reduce using rule 97 (primary -> Identifier .)
    Colon           reduce using rule 97 (primary -> Identifier .)


state 22

    (98) primary -> LParen . expression RParen
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 61
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 23

    (53) statement_matched -> LBrace . block RBrace
    (14) block -> . block block_item
    (15) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 62
    empty                          shift and go to state 19

state 24

    (6) function -> type Identifier LParen parameterlist RParen LBrace block RBrace .

    Int             reduce using rule 6 (function -> type Identifier LParen parameterlist RParen LBrace block RBrace .)
    $end            reduce using rule 6 (function -> type Identifier LParen parameterlist RParen LBrace block RBrace .)


state 25

    (14) block -> block block_item .

    RBrace          reduce using rule 14 (block -> block block_item .)
    If              reduce using rule 14 (block -> block block_item .)
    While           reduce using rule 14 (block -> block block_item .)
    For             reduce using rule 14 (block -> block block_item .)
    Do              reduce using rule 14 (block -> block block_item .)
    Return          reduce using rule 14 (block -> block block_item .)
    LBrace          reduce using rule 14 (block -> block block_item .)
    Break           reduce using rule 14 (block -> block block_item .)
    Continue        reduce using rule 14 (block -> block block_item .)
    Int             reduce using rule 14 (block -> block block_item .)
    Identifier      reduce using rule 14 (block -> block block_item .)
    Minus           reduce using rule 14 (block -> block block_item .)
    BitNot          reduce using rule 14 (block -> block block_item .)
    Not             reduce using rule 14 (block -> block block_item .)
    Integer         reduce using rule 14 (block -> block block_item .)
    LParen          reduce using rule 14 (block -> block block_item .)
    Semi            reduce using rule 14 (block -> block block_item .)


state 26

    (16) block_item -> statement .

    RBrace          reduce using rule 16 (block_item -> statement .)
    If              reduce using rule 16 (block_item -> statement .)
    While           reduce using rule 16 (block_item -> statement .)
    For             reduce using rule 16 (block_item -> statement .)
    Do              reduce using rule 16 (block_item -> statement .)
    Return          reduce using rule 16 (block_item -> statement .)
    LBrace          reduce using rule 16 (block_item -> statement .)
    Break           reduce using rule 16 (block_item -> statement .)
    Continue        reduce using rule 16 (block_item -> statement .)
    Int             reduce using rule 16 (block_item -> statement .)
    Identifier      reduce using rule 16 (block_item -> statement .)
    Minus           reduce using rule 16 (block_item -> statement .)
    BitNot          reduce using rule 16 (block_item -> statement .)
    Not             reduce using rule 16 (block_item -> statement .)
    Integer         reduce using rule 16 (block_item -> statement .)
    LParen          reduce using rule 16 (block_item -> statement .)
    Semi            reduce using rule 16 (block_item -> statement .)


state 27

    (17) block_item -> declaration . Semi

    Semi            shift and go to state 63


state 28

    (18) statement -> statement_matched .

    RBrace          reduce using rule 18 (statement -> statement_matched .)
    If              reduce using rule 18 (statement -> statement_matched .)
    While           reduce using rule 18 (statement -> statement_matched .)
    For             reduce using rule 18 (statement -> statement_matched .)
    Do              reduce using rule 18 (statement -> statement_matched .)
    Return          reduce using rule 18 (statement -> statement_matched .)
    LBrace          reduce using rule 18 (statement -> statement_matched .)
    Break           reduce using rule 18 (statement -> statement_matched .)
    Continue        reduce using rule 18 (statement -> statement_matched .)
    Int             reduce using rule 18 (statement -> statement_matched .)
    Identifier      reduce using rule 18 (statement -> statement_matched .)
    Minus           reduce using rule 18 (statement -> statement_matched .)
    BitNot          reduce using rule 18 (statement -> statement_matched .)
    Not             reduce using rule 18 (statement -> statement_matched .)
    Integer         reduce using rule 18 (statement -> statement_matched .)
    LParen          reduce using rule 18 (statement -> statement_matched .)
    Semi            reduce using rule 18 (statement -> statement_matched .)


state 29

    (19) statement -> statement_unmatched .

    RBrace          reduce using rule 19 (statement -> statement_unmatched .)
    If              reduce using rule 19 (statement -> statement_unmatched .)
    While           reduce using rule 19 (statement -> statement_unmatched .)
    For             reduce using rule 19 (statement -> statement_unmatched .)
    Do              reduce using rule 19 (statement -> statement_unmatched .)
    Return          reduce using rule 19 (statement -> statement_unmatched .)
    LBrace          reduce using rule 19 (statement -> statement_unmatched .)
    Break           reduce using rule 19 (statement -> statement_unmatched .)
    Continue        reduce using rule 19 (statement -> statement_unmatched .)
    Int             reduce using rule 19 (statement -> statement_unmatched .)
    Identifier      reduce using rule 19 (statement -> statement_unmatched .)
    Minus           reduce using rule 19 (statement -> statement_unmatched .)
    BitNot          reduce using rule 19 (statement -> statement_unmatched .)
    Not             reduce using rule 19 (statement -> statement_unmatched .)
    Integer         reduce using rule 19 (statement -> statement_unmatched .)
    LParen          reduce using rule 19 (statement -> statement_unmatched .)
    Semi            reduce using rule 19 (statement -> statement_unmatched .)


state 30

    (56) opt_expression -> expression .

    Semi            reduce using rule 56 (opt_expression -> expression .)


state 31

    (20) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (21) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 64


state 32

    (23) statement_matched -> While . LParen expression RParen statement_matched
    (24) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 65


state 33

    (25) statement_matched -> For . LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> For . LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> For . LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> For . LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> For . LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> For . LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> For . LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> For . LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> For . LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> For . LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> For . LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> For . LParen Semi Semi RParen statement_matched
    (27) statement_unmatched -> For . LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> For . LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> For . LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> For . LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> For . LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> For . LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> For . LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> For . LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> For . LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> For . LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> For . LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> For . LParen Semi Semi RParen statement_unmatched

    LParen          shift and go to state 66


state 34

    (49) statement_matched -> Do . statement_matched While LParen expression RParen Semi
    (50) statement_unmatched -> Do . statement_unmatched While LParen expression RParen Semi
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    statement_matched              shift and go to state 67
    expression                     shift and go to state 30
    statement_unmatched            shift and go to state 68
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 35

    (51) statement_matched -> Return . expression Semi
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 69
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 36

    (52) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 70


state 37

    (54) statement_matched -> Break . Semi

    Semi            shift and go to state 71


state 38

    (55) statement_matched -> Continue . Semi

    Semi            shift and go to state 72


state 39

    (57) opt_expression -> empty .

    Semi            reduce using rule 57 (opt_expression -> empty .)


state 40

    (60) expression -> assignment .

    Semi            reduce using rule 60 (expression -> assignment .)
    RParen          reduce using rule 60 (expression -> assignment .)
    Comma           reduce using rule 60 (expression -> assignment .)
    Colon           reduce using rule 60 (expression -> assignment .)


state 41

    (61) assignment -> conditional .

    Semi            reduce using rule 61 (assignment -> conditional .)
    RParen          reduce using rule 61 (assignment -> conditional .)
    Comma           reduce using rule 61 (assignment -> conditional .)
    Colon           reduce using rule 61 (assignment -> conditional .)


state 42

    (62) conditional -> logical_or .
    (95) conditional -> logical_or . Question expression Colon conditional
    (79) logical_or -> logical_or . Or logical_and

    Semi            reduce using rule 62 (conditional -> logical_or .)
    RParen          reduce using rule 62 (conditional -> logical_or .)
    Comma           reduce using rule 62 (conditional -> logical_or .)
    Colon           reduce using rule 62 (conditional -> logical_or .)
    Question        shift and go to state 73
    Or              shift and go to state 74


state 43

    (63) logical_or -> logical_and .
    (80) logical_and -> logical_and . And bit_or

    Question        reduce using rule 63 (logical_or -> logical_and .)
    Or              reduce using rule 63 (logical_or -> logical_and .)
    Semi            reduce using rule 63 (logical_or -> logical_and .)
    RParen          reduce using rule 63 (logical_or -> logical_and .)
    Comma           reduce using rule 63 (logical_or -> logical_and .)
    Colon           reduce using rule 63 (logical_or -> logical_and .)
    And             shift and go to state 75


state 44

    (64) logical_and -> bit_or .
    (81) bit_or -> bit_or . BitOr xor

    And             reduce using rule 64 (logical_and -> bit_or .)
    Question        reduce using rule 64 (logical_and -> bit_or .)
    Or              reduce using rule 64 (logical_and -> bit_or .)
    Semi            reduce using rule 64 (logical_and -> bit_or .)
    RParen          reduce using rule 64 (logical_and -> bit_or .)
    Comma           reduce using rule 64 (logical_and -> bit_or .)
    Colon           reduce using rule 64 (logical_and -> bit_or .)
    BitOr           shift and go to state 76


state 45

    (65) bit_or -> xor .
    (82) xor -> xor . Xor bit_and

    BitOr           reduce using rule 65 (bit_or -> xor .)
    And             reduce using rule 65 (bit_or -> xor .)
    Question        reduce using rule 65 (bit_or -> xor .)
    Or              reduce using rule 65 (bit_or -> xor .)
    Semi            reduce using rule 65 (bit_or -> xor .)
    RParen          reduce using rule 65 (bit_or -> xor .)
    Comma           reduce using rule 65 (bit_or -> xor .)
    Colon           reduce using rule 65 (bit_or -> xor .)
    Xor             shift and go to state 77


state 46

    (66) xor -> bit_and .
    (83) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 66 (xor -> bit_and .)
    BitOr           reduce using rule 66 (xor -> bit_and .)
    And             reduce using rule 66 (xor -> bit_and .)
    Question        reduce using rule 66 (xor -> bit_and .)
    Or              reduce using rule 66 (xor -> bit_and .)
    Semi            reduce using rule 66 (xor -> bit_and .)
    RParen          reduce using rule 66 (xor -> bit_and .)
    Comma           reduce using rule 66 (xor -> bit_and .)
    Colon           reduce using rule 66 (xor -> bit_and .)
    BitAnd          shift and go to state 78


state 47

    (67) bit_and -> equality .
    (84) equality -> equality . NotEqual relational
    (85) equality -> equality . Equal relational

    BitAnd          reduce using rule 67 (bit_and -> equality .)
    Xor             reduce using rule 67 (bit_and -> equality .)
    BitOr           reduce using rule 67 (bit_and -> equality .)
    And             reduce using rule 67 (bit_and -> equality .)
    Question        reduce using rule 67 (bit_and -> equality .)
    Or              reduce using rule 67 (bit_and -> equality .)
    Semi            reduce using rule 67 (bit_and -> equality .)
    RParen          reduce using rule 67 (bit_and -> equality .)
    Comma           reduce using rule 67 (bit_and -> equality .)
    Colon           reduce using rule 67 (bit_and -> equality .)
    NotEqual        shift and go to state 79
    Equal           shift and go to state 80


state 48

    (68) equality -> relational .
    (86) relational -> relational . Less additive
    (87) relational -> relational . Greater additive
    (88) relational -> relational . LessEqual additive
    (89) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 68 (equality -> relational .)
    Equal           reduce using rule 68 (equality -> relational .)
    BitAnd          reduce using rule 68 (equality -> relational .)
    Xor             reduce using rule 68 (equality -> relational .)
    BitOr           reduce using rule 68 (equality -> relational .)
    And             reduce using rule 68 (equality -> relational .)
    Question        reduce using rule 68 (equality -> relational .)
    Or              reduce using rule 68 (equality -> relational .)
    Semi            reduce using rule 68 (equality -> relational .)
    RParen          reduce using rule 68 (equality -> relational .)
    Comma           reduce using rule 68 (equality -> relational .)
    Colon           reduce using rule 68 (equality -> relational .)
    Less            shift and go to state 81
    Greater         shift and go to state 82
    LessEqual       shift and go to state 83
    GreaterEqual    shift and go to state 84


state 49

    (69) relational -> additive .
    (90) additive -> additive . Plus multiplicative
    (91) additive -> additive . Minus multiplicative

    Less            reduce using rule 69 (relational -> additive .)
    Greater         reduce using rule 69 (relational -> additive .)
    LessEqual       reduce using rule 69 (relational -> additive .)
    GreaterEqual    reduce using rule 69 (relational -> additive .)
    NotEqual        reduce using rule 69 (relational -> additive .)
    Equal           reduce using rule 69 (relational -> additive .)
    BitAnd          reduce using rule 69 (relational -> additive .)
    Xor             reduce using rule 69 (relational -> additive .)
    BitOr           reduce using rule 69 (relational -> additive .)
    And             reduce using rule 69 (relational -> additive .)
    Question        reduce using rule 69 (relational -> additive .)
    Or              reduce using rule 69 (relational -> additive .)
    Semi            reduce using rule 69 (relational -> additive .)
    RParen          reduce using rule 69 (relational -> additive .)
    Comma           reduce using rule 69 (relational -> additive .)
    Colon           reduce using rule 69 (relational -> additive .)
    Plus            shift and go to state 85
    Minus           shift and go to state 86


state 50

    (70) additive -> multiplicative .
    (92) multiplicative -> multiplicative . Mul unary
    (93) multiplicative -> multiplicative . Div unary
    (94) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 70 (additive -> multiplicative .)
    Minus           reduce using rule 70 (additive -> multiplicative .)
    Less            reduce using rule 70 (additive -> multiplicative .)
    Greater         reduce using rule 70 (additive -> multiplicative .)
    LessEqual       reduce using rule 70 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 70 (additive -> multiplicative .)
    NotEqual        reduce using rule 70 (additive -> multiplicative .)
    Equal           reduce using rule 70 (additive -> multiplicative .)
    BitAnd          reduce using rule 70 (additive -> multiplicative .)
    Xor             reduce using rule 70 (additive -> multiplicative .)
    BitOr           reduce using rule 70 (additive -> multiplicative .)
    And             reduce using rule 70 (additive -> multiplicative .)
    Question        reduce using rule 70 (additive -> multiplicative .)
    Or              reduce using rule 70 (additive -> multiplicative .)
    Semi            reduce using rule 70 (additive -> multiplicative .)
    RParen          reduce using rule 70 (additive -> multiplicative .)
    Comma           reduce using rule 70 (additive -> multiplicative .)
    Colon           reduce using rule 70 (additive -> multiplicative .)
    Mul             shift and go to state 87
    Div             shift and go to state 88
    Mod             shift and go to state 89


state 51

    (75) unary -> Minus . unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 90
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 52

    (71) multiplicative -> unary .

    Mul             reduce using rule 71 (multiplicative -> unary .)
    Div             reduce using rule 71 (multiplicative -> unary .)
    Mod             reduce using rule 71 (multiplicative -> unary .)
    Plus            reduce using rule 71 (multiplicative -> unary .)
    Minus           reduce using rule 71 (multiplicative -> unary .)
    Less            reduce using rule 71 (multiplicative -> unary .)
    Greater         reduce using rule 71 (multiplicative -> unary .)
    LessEqual       reduce using rule 71 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 71 (multiplicative -> unary .)
    NotEqual        reduce using rule 71 (multiplicative -> unary .)
    Equal           reduce using rule 71 (multiplicative -> unary .)
    BitAnd          reduce using rule 71 (multiplicative -> unary .)
    Xor             reduce using rule 71 (multiplicative -> unary .)
    BitOr           reduce using rule 71 (multiplicative -> unary .)
    And             reduce using rule 71 (multiplicative -> unary .)
    Question        reduce using rule 71 (multiplicative -> unary .)
    Or              reduce using rule 71 (multiplicative -> unary .)
    Semi            reduce using rule 71 (multiplicative -> unary .)
    RParen          reduce using rule 71 (multiplicative -> unary .)
    Comma           reduce using rule 71 (multiplicative -> unary .)
    Colon           reduce using rule 71 (multiplicative -> unary .)


state 53

    (72) unary -> postfix .

    Mul             reduce using rule 72 (unary -> postfix .)
    Div             reduce using rule 72 (unary -> postfix .)
    Mod             reduce using rule 72 (unary -> postfix .)
    Plus            reduce using rule 72 (unary -> postfix .)
    Minus           reduce using rule 72 (unary -> postfix .)
    Less            reduce using rule 72 (unary -> postfix .)
    Greater         reduce using rule 72 (unary -> postfix .)
    LessEqual       reduce using rule 72 (unary -> postfix .)
    GreaterEqual    reduce using rule 72 (unary -> postfix .)
    NotEqual        reduce using rule 72 (unary -> postfix .)
    Equal           reduce using rule 72 (unary -> postfix .)
    BitAnd          reduce using rule 72 (unary -> postfix .)
    Xor             reduce using rule 72 (unary -> postfix .)
    BitOr           reduce using rule 72 (unary -> postfix .)
    And             reduce using rule 72 (unary -> postfix .)
    Question        reduce using rule 72 (unary -> postfix .)
    Or              reduce using rule 72 (unary -> postfix .)
    Semi            reduce using rule 72 (unary -> postfix .)
    RParen          reduce using rule 72 (unary -> postfix .)
    Comma           reduce using rule 72 (unary -> postfix .)
    Colon           reduce using rule 72 (unary -> postfix .)


state 54

    (76) unary -> BitNot . unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 92
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 55

    (77) unary -> Not . unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 93
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 56

    (73) postfix -> primary .

    Mul             reduce using rule 73 (postfix -> primary .)
    Div             reduce using rule 73 (postfix -> primary .)
    Mod             reduce using rule 73 (postfix -> primary .)
    Plus            reduce using rule 73 (postfix -> primary .)
    Minus           reduce using rule 73 (postfix -> primary .)
    Less            reduce using rule 73 (postfix -> primary .)
    Greater         reduce using rule 73 (postfix -> primary .)
    LessEqual       reduce using rule 73 (postfix -> primary .)
    GreaterEqual    reduce using rule 73 (postfix -> primary .)
    NotEqual        reduce using rule 73 (postfix -> primary .)
    Equal           reduce using rule 73 (postfix -> primary .)
    BitAnd          reduce using rule 73 (postfix -> primary .)
    Xor             reduce using rule 73 (postfix -> primary .)
    BitOr           reduce using rule 73 (postfix -> primary .)
    And             reduce using rule 73 (postfix -> primary .)
    Question        reduce using rule 73 (postfix -> primary .)
    Or              reduce using rule 73 (postfix -> primary .)
    Semi            reduce using rule 73 (postfix -> primary .)
    RParen          reduce using rule 73 (postfix -> primary .)
    Comma           reduce using rule 73 (postfix -> primary .)
    Colon           reduce using rule 73 (postfix -> primary .)


state 57

    (96) primary -> Integer .

    Mul             reduce using rule 96 (primary -> Integer .)
    Div             reduce using rule 96 (primary -> Integer .)
    Mod             reduce using rule 96 (primary -> Integer .)
    Plus            reduce using rule 96 (primary -> Integer .)
    Minus           reduce using rule 96 (primary -> Integer .)
    Less            reduce using rule 96 (primary -> Integer .)
    Greater         reduce using rule 96 (primary -> Integer .)
    LessEqual       reduce using rule 96 (primary -> Integer .)
    GreaterEqual    reduce using rule 96 (primary -> Integer .)
    NotEqual        reduce using rule 96 (primary -> Integer .)
    Equal           reduce using rule 96 (primary -> Integer .)
    BitAnd          reduce using rule 96 (primary -> Integer .)
    Xor             reduce using rule 96 (primary -> Integer .)
    BitOr           reduce using rule 96 (primary -> Integer .)
    And             reduce using rule 96 (primary -> Integer .)
    Question        reduce using rule 96 (primary -> Integer .)
    Or              reduce using rule 96 (primary -> Integer .)
    Semi            reduce using rule 96 (primary -> Integer .)
    RParen          reduce using rule 96 (primary -> Integer .)
    Comma           reduce using rule 96 (primary -> Integer .)
    Colon           reduce using rule 96 (primary -> Integer .)


state 58

    (58) declaration -> type Identifier .
    (59) declaration -> type Identifier . Assign expression

    Semi            reduce using rule 58 (declaration -> type Identifier .)
    Assign          shift and go to state 94


state 59

    (78) assignment -> Identifier Assign . expression
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 95
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 60

    (74) postfix -> Identifier LParen . expressionlist RParen
    (11) expressionlist -> . empty
    (12) expressionlist -> . expression
    (13) expressionlist -> . expressionlist Comma expression
    (1) empty -> .
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expressionlist                 shift and go to state 96
    empty                          shift and go to state 97
    expression                     shift and go to state 98
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 61

    (98) primary -> LParen expression . RParen

    RParen          shift and go to state 99


state 62

    (53) statement_matched -> LBrace block . RBrace
    (14) block -> block . block_item
    (16) block_item -> . statement
    (17) block_item -> . declaration Semi
    (18) statement -> . statement_matched
    (19) statement -> . statement_unmatched
    (58) declaration -> . type Identifier
    (59) declaration -> . type Identifier Assign expression
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (4) type -> . Int
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RBrace          shift and go to state 100
    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Int             shift and go to state 5
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    block_item                     shift and go to state 25
    statement                      shift and go to state 26
    declaration                    shift and go to state 27
    statement_matched              shift and go to state 28
    statement_unmatched            shift and go to state 29
    type                           shift and go to state 20
    expression                     shift and go to state 30
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 63

    (17) block_item -> declaration Semi .

    RBrace          reduce using rule 17 (block_item -> declaration Semi .)
    If              reduce using rule 17 (block_item -> declaration Semi .)
    While           reduce using rule 17 (block_item -> declaration Semi .)
    For             reduce using rule 17 (block_item -> declaration Semi .)
    Do              reduce using rule 17 (block_item -> declaration Semi .)
    Return          reduce using rule 17 (block_item -> declaration Semi .)
    LBrace          reduce using rule 17 (block_item -> declaration Semi .)
    Break           reduce using rule 17 (block_item -> declaration Semi .)
    Continue        reduce using rule 17 (block_item -> declaration Semi .)
    Int             reduce using rule 17 (block_item -> declaration Semi .)
    Identifier      reduce using rule 17 (block_item -> declaration Semi .)
    Minus           reduce using rule 17 (block_item -> declaration Semi .)
    BitNot          reduce using rule 17 (block_item -> declaration Semi .)
    Not             reduce using rule 17 (block_item -> declaration Semi .)
    Integer         reduce using rule 17 (block_item -> declaration Semi .)
    LParen          reduce using rule 17 (block_item -> declaration Semi .)
    Semi            reduce using rule 17 (block_item -> declaration Semi .)


state 64

    (20) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (21) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> If LParen . expression RParen statement
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 101
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 65

    (23) statement_matched -> While LParen . expression RParen statement_matched
    (24) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 102
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 66

    (25) statement_matched -> For LParen . expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> For LParen . declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> For LParen . Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> For LParen . expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> For LParen . declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> For LParen . expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> For LParen . declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> For LParen . expression Semi Semi RParen statement_matched
    (40) statement_matched -> For LParen . declaration Semi Semi RParen statement_matched
    (43) statement_matched -> For LParen . Semi expression Semi RParen statement_matched
    (45) statement_matched -> For LParen . Semi Semi expression RParen statement_matched
    (47) statement_matched -> For LParen . Semi Semi RParen statement_matched
    (27) statement_unmatched -> For LParen . expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> For LParen . declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> For LParen . Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> For LParen . expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> For LParen . declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> For LParen . expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> For LParen . declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> For LParen . expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> For LParen . declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> For LParen . Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> For LParen . Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> For LParen . Semi Semi RParen statement_unmatched
    (60) expression -> . assignment
    (58) declaration -> . type Identifier
    (59) declaration -> . type Identifier Assign expression
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (4) type -> . Int
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Semi            shift and go to state 104
    Identifier      shift and go to state 21
    Int             shift and go to state 5
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 103
    declaration                    shift and go to state 105
    assignment                     shift and go to state 40
    type                           shift and go to state 20
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 67

    (49) statement_matched -> Do statement_matched . While LParen expression RParen Semi

    While           shift and go to state 106


state 68

    (50) statement_unmatched -> Do statement_unmatched . While LParen expression RParen Semi

    While           shift and go to state 107


state 69

    (51) statement_matched -> Return expression . Semi

    Semi            shift and go to state 108


state 70

    (52) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 52 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 52 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 52 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 52 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 52 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 52 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 52 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 52 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 52 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 52 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 52 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 52 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 52 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 52 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 52 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 52 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 52 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 52 (statement_matched -> opt_expression Semi .)


state 71

    (54) statement_matched -> Break Semi .

    RBrace          reduce using rule 54 (statement_matched -> Break Semi .)
    If              reduce using rule 54 (statement_matched -> Break Semi .)
    While           reduce using rule 54 (statement_matched -> Break Semi .)
    For             reduce using rule 54 (statement_matched -> Break Semi .)
    Do              reduce using rule 54 (statement_matched -> Break Semi .)
    Return          reduce using rule 54 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 54 (statement_matched -> Break Semi .)
    Break           reduce using rule 54 (statement_matched -> Break Semi .)
    Continue        reduce using rule 54 (statement_matched -> Break Semi .)
    Int             reduce using rule 54 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 54 (statement_matched -> Break Semi .)
    Minus           reduce using rule 54 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 54 (statement_matched -> Break Semi .)
    Not             reduce using rule 54 (statement_matched -> Break Semi .)
    Integer         reduce using rule 54 (statement_matched -> Break Semi .)
    LParen          reduce using rule 54 (statement_matched -> Break Semi .)
    Semi            reduce using rule 54 (statement_matched -> Break Semi .)
    Else            reduce using rule 54 (statement_matched -> Break Semi .)


state 72

    (55) statement_matched -> Continue Semi .

    RBrace          reduce using rule 55 (statement_matched -> Continue Semi .)
    If              reduce using rule 55 (statement_matched -> Continue Semi .)
    While           reduce using rule 55 (statement_matched -> Continue Semi .)
    For             reduce using rule 55 (statement_matched -> Continue Semi .)
    Do              reduce using rule 55 (statement_matched -> Continue Semi .)
    Return          reduce using rule 55 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 55 (statement_matched -> Continue Semi .)
    Break           reduce using rule 55 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 55 (statement_matched -> Continue Semi .)
    Int             reduce using rule 55 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 55 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 55 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 55 (statement_matched -> Continue Semi .)
    Not             reduce using rule 55 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 55 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 55 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 55 (statement_matched -> Continue Semi .)
    Else            reduce using rule 55 (statement_matched -> Continue Semi .)


state 73

    (95) conditional -> logical_or Question . expression Colon conditional
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    logical_or                     shift and go to state 42
    expression                     shift and go to state 109
    conditional                    shift and go to state 41
    assignment                     shift and go to state 40
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 74

    (79) logical_or -> logical_or Or . logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    logical_and                    shift and go to state 110
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 75

    (80) logical_and -> logical_and And . bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    bit_or                         shift and go to state 111
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 76

    (81) bit_or -> bit_or BitOr . xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    xor                            shift and go to state 112
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 77

    (82) xor -> xor Xor . bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    bit_and                        shift and go to state 113
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 78

    (83) bit_and -> bit_and BitAnd . equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    equality                       shift and go to state 114
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 79

    (84) equality -> equality NotEqual . relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    relational                     shift and go to state 115
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 80

    (85) equality -> equality Equal . relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    relational                     shift and go to state 116
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 81

    (86) relational -> relational Less . additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    additive                       shift and go to state 117
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 82

    (87) relational -> relational Greater . additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    additive                       shift and go to state 118
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 83

    (88) relational -> relational LessEqual . additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    additive                       shift and go to state 119
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 84

    (89) relational -> relational GreaterEqual . additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    additive                       shift and go to state 120
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 85

    (90) additive -> additive Plus . multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    multiplicative                 shift and go to state 121
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 86

    (91) additive -> additive Minus . multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    multiplicative                 shift and go to state 122
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 87

    (92) multiplicative -> multiplicative Mul . unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 123
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 88

    (93) multiplicative -> multiplicative Div . unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 124
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 89

    (94) multiplicative -> multiplicative Mod . unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 125
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 90

    (75) unary -> Minus unary .

    Mul             reduce using rule 75 (unary -> Minus unary .)
    Div             reduce using rule 75 (unary -> Minus unary .)
    Mod             reduce using rule 75 (unary -> Minus unary .)
    Plus            reduce using rule 75 (unary -> Minus unary .)
    Minus           reduce using rule 75 (unary -> Minus unary .)
    Less            reduce using rule 75 (unary -> Minus unary .)
    Greater         reduce using rule 75 (unary -> Minus unary .)
    LessEqual       reduce using rule 75 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 75 (unary -> Minus unary .)
    NotEqual        reduce using rule 75 (unary -> Minus unary .)
    Equal           reduce using rule 75 (unary -> Minus unary .)
    BitAnd          reduce using rule 75 (unary -> Minus unary .)
    Xor             reduce using rule 75 (unary -> Minus unary .)
    BitOr           reduce using rule 75 (unary -> Minus unary .)
    And             reduce using rule 75 (unary -> Minus unary .)
    Question        reduce using rule 75 (unary -> Minus unary .)
    Or              reduce using rule 75 (unary -> Minus unary .)
    Semi            reduce using rule 75 (unary -> Minus unary .)
    RParen          reduce using rule 75 (unary -> Minus unary .)
    Comma           reduce using rule 75 (unary -> Minus unary .)
    Colon           reduce using rule 75 (unary -> Minus unary .)


state 91

    (74) postfix -> Identifier . LParen expressionlist RParen
    (97) primary -> Identifier .

    LParen          shift and go to state 60
    Mul             reduce using rule 97 (primary -> Identifier .)
    Div             reduce using rule 97 (primary -> Identifier .)
    Mod             reduce using rule 97 (primary -> Identifier .)
    Plus            reduce using rule 97 (primary -> Identifier .)
    Minus           reduce using rule 97 (primary -> Identifier .)
    Less            reduce using rule 97 (primary -> Identifier .)
    Greater         reduce using rule 97 (primary -> Identifier .)
    LessEqual       reduce using rule 97 (primary -> Identifier .)
    GreaterEqual    reduce using rule 97 (primary -> Identifier .)
    NotEqual        reduce using rule 97 (primary -> Identifier .)
    Equal           reduce using rule 97 (primary -> Identifier .)
    BitAnd          reduce using rule 97 (primary -> Identifier .)
    Xor             reduce using rule 97 (primary -> Identifier .)
    BitOr           reduce using rule 97 (primary -> Identifier .)
    And             reduce using rule 97 (primary -> Identifier .)
    Question        reduce using rule 97 (primary -> Identifier .)
    Or              reduce using rule 97 (primary -> Identifier .)
    Semi            reduce using rule 97 (primary -> Identifier .)
    RParen          reduce using rule 97 (primary -> Identifier .)
    Comma           reduce using rule 97 (primary -> Identifier .)
    Colon           reduce using rule 97 (primary -> Identifier .)


state 92

    (76) unary -> BitNot unary .

    Mul             reduce using rule 76 (unary -> BitNot unary .)
    Div             reduce using rule 76 (unary -> BitNot unary .)
    Mod             reduce using rule 76 (unary -> BitNot unary .)
    Plus            reduce using rule 76 (unary -> BitNot unary .)
    Minus           reduce using rule 76 (unary -> BitNot unary .)
    Less            reduce using rule 76 (unary -> BitNot unary .)
    Greater         reduce using rule 76 (unary -> BitNot unary .)
    LessEqual       reduce using rule 76 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 76 (unary -> BitNot unary .)
    NotEqual        reduce using rule 76 (unary -> BitNot unary .)
    Equal           reduce using rule 76 (unary -> BitNot unary .)
    BitAnd          reduce using rule 76 (unary -> BitNot unary .)
    Xor             reduce using rule 76 (unary -> BitNot unary .)
    BitOr           reduce using rule 76 (unary -> BitNot unary .)
    And             reduce using rule 76 (unary -> BitNot unary .)
    Question        reduce using rule 76 (unary -> BitNot unary .)
    Or              reduce using rule 76 (unary -> BitNot unary .)
    Semi            reduce using rule 76 (unary -> BitNot unary .)
    RParen          reduce using rule 76 (unary -> BitNot unary .)
    Comma           reduce using rule 76 (unary -> BitNot unary .)
    Colon           reduce using rule 76 (unary -> BitNot unary .)


state 93

    (77) unary -> Not unary .

    Mul             reduce using rule 77 (unary -> Not unary .)
    Div             reduce using rule 77 (unary -> Not unary .)
    Mod             reduce using rule 77 (unary -> Not unary .)
    Plus            reduce using rule 77 (unary -> Not unary .)
    Minus           reduce using rule 77 (unary -> Not unary .)
    Less            reduce using rule 77 (unary -> Not unary .)
    Greater         reduce using rule 77 (unary -> Not unary .)
    LessEqual       reduce using rule 77 (unary -> Not unary .)
    GreaterEqual    reduce using rule 77 (unary -> Not unary .)
    NotEqual        reduce using rule 77 (unary -> Not unary .)
    Equal           reduce using rule 77 (unary -> Not unary .)
    BitAnd          reduce using rule 77 (unary -> Not unary .)
    Xor             reduce using rule 77 (unary -> Not unary .)
    BitOr           reduce using rule 77 (unary -> Not unary .)
    And             reduce using rule 77 (unary -> Not unary .)
    Question        reduce using rule 77 (unary -> Not unary .)
    Or              reduce using rule 77 (unary -> Not unary .)
    Semi            reduce using rule 77 (unary -> Not unary .)
    RParen          reduce using rule 77 (unary -> Not unary .)
    Comma           reduce using rule 77 (unary -> Not unary .)
    Colon           reduce using rule 77 (unary -> Not unary .)


state 94

    (59) declaration -> type Identifier Assign . expression
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 126
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 95

    (78) assignment -> Identifier Assign expression .

    Semi            reduce using rule 78 (assignment -> Identifier Assign expression .)
    RParen          reduce using rule 78 (assignment -> Identifier Assign expression .)
    Comma           reduce using rule 78 (assignment -> Identifier Assign expression .)
    Colon           reduce using rule 78 (assignment -> Identifier Assign expression .)


state 96

    (74) postfix -> Identifier LParen expressionlist . RParen
    (13) expressionlist -> expressionlist . Comma expression

    RParen          shift and go to state 127
    Comma           shift and go to state 128


state 97

    (11) expressionlist -> empty .

    RParen          reduce using rule 11 (expressionlist -> empty .)
    Comma           reduce using rule 11 (expressionlist -> empty .)


state 98

    (12) expressionlist -> expression .

    RParen          reduce using rule 12 (expressionlist -> expression .)
    Comma           reduce using rule 12 (expressionlist -> expression .)


state 99

    (98) primary -> LParen expression RParen .

    Mul             reduce using rule 98 (primary -> LParen expression RParen .)
    Div             reduce using rule 98 (primary -> LParen expression RParen .)
    Mod             reduce using rule 98 (primary -> LParen expression RParen .)
    Plus            reduce using rule 98 (primary -> LParen expression RParen .)
    Minus           reduce using rule 98 (primary -> LParen expression RParen .)
    Less            reduce using rule 98 (primary -> LParen expression RParen .)
    Greater         reduce using rule 98 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 98 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 98 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 98 (primary -> LParen expression RParen .)
    Equal           reduce using rule 98 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 98 (primary -> LParen expression RParen .)
    Xor             reduce using rule 98 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 98 (primary -> LParen expression RParen .)
    And             reduce using rule 98 (primary -> LParen expression RParen .)
    Question        reduce using rule 98 (primary -> LParen expression RParen .)
    Or              reduce using rule 98 (primary -> LParen expression RParen .)
    Semi            reduce using rule 98 (primary -> LParen expression RParen .)
    RParen          reduce using rule 98 (primary -> LParen expression RParen .)
    Comma           reduce using rule 98 (primary -> LParen expression RParen .)
    Colon           reduce using rule 98 (primary -> LParen expression RParen .)


state 100

    (53) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 53 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 53 (statement_matched -> LBrace block RBrace .)


state 101

    (20) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (21) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 129


state 102

    (23) statement_matched -> While LParen expression . RParen statement_matched
    (24) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 130


state 103

    (25) statement_matched -> For LParen expression . Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> For LParen expression . Semi Semi expression RParen statement_matched
    (35) statement_matched -> For LParen expression . Semi expression Semi RParen statement_matched
    (39) statement_matched -> For LParen expression . Semi Semi RParen statement_matched
    (27) statement_unmatched -> For LParen expression . Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> For LParen expression . Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> For LParen expression . Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> For LParen expression . Semi Semi RParen statement_unmatched

    Semi            shift and go to state 131


state 104

    (29) statement_matched -> For LParen Semi . expression Semi expression RParen statement_matched
    (43) statement_matched -> For LParen Semi . expression Semi RParen statement_matched
    (45) statement_matched -> For LParen Semi . Semi expression RParen statement_matched
    (47) statement_matched -> For LParen Semi . Semi RParen statement_matched
    (30) statement_unmatched -> For LParen Semi . expression Semi expression RParen statement_unmatched
    (44) statement_unmatched -> For LParen Semi . expression Semi RParen statement_unmatched
    (46) statement_unmatched -> For LParen Semi . Semi expression RParen statement_unmatched
    (48) statement_unmatched -> For LParen Semi . Semi RParen statement_unmatched
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Semi            shift and go to state 132
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 133
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 105

    (26) statement_matched -> For LParen declaration . Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> For LParen declaration . Semi Semi expression RParen statement_matched
    (36) statement_matched -> For LParen declaration . Semi expression Semi RParen statement_matched
    (40) statement_matched -> For LParen declaration . Semi Semi RParen statement_matched
    (28) statement_unmatched -> For LParen declaration . Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> For LParen declaration . Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> For LParen declaration . Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> For LParen declaration . Semi Semi RParen statement_unmatched

    Semi            shift and go to state 134


state 106

    (49) statement_matched -> Do statement_matched While . LParen expression RParen Semi

    LParen          shift and go to state 135


state 107

    (50) statement_unmatched -> Do statement_unmatched While . LParen expression RParen Semi

    LParen          shift and go to state 136


state 108

    (51) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 51 (statement_matched -> Return expression Semi .)
    If              reduce using rule 51 (statement_matched -> Return expression Semi .)
    While           reduce using rule 51 (statement_matched -> Return expression Semi .)
    For             reduce using rule 51 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 51 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 51 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 51 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 51 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 51 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 51 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 51 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 51 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 51 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 51 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 51 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 51 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 51 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 51 (statement_matched -> Return expression Semi .)


state 109

    (95) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 137


state 110

    (79) logical_or -> logical_or Or logical_and .
    (80) logical_and -> logical_and . And bit_or

    Question        reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    Comma           reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 79 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 75


state 111

    (80) logical_and -> logical_and And bit_or .
    (81) bit_or -> bit_or . BitOr xor

    And             reduce using rule 80 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 80 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 80 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 80 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 80 (logical_and -> logical_and And bit_or .)
    Comma           reduce using rule 80 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 80 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 76


state 112

    (81) bit_or -> bit_or BitOr xor .
    (82) xor -> xor . Xor bit_and

    BitOr           reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Comma           reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 81 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 77


state 113

    (82) xor -> xor Xor bit_and .
    (83) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 82 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 82 (xor -> xor Xor bit_and .)
    And             reduce using rule 82 (xor -> xor Xor bit_and .)
    Question        reduce using rule 82 (xor -> xor Xor bit_and .)
    Or              reduce using rule 82 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 82 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 82 (xor -> xor Xor bit_and .)
    Comma           reduce using rule 82 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 82 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 78


state 114

    (83) bit_and -> bit_and BitAnd equality .
    (84) equality -> equality . NotEqual relational
    (85) equality -> equality . Equal relational

    BitAnd          reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Comma           reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 83 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 79
    Equal           shift and go to state 80


state 115

    (84) equality -> equality NotEqual relational .
    (86) relational -> relational . Less additive
    (87) relational -> relational . Greater additive
    (88) relational -> relational . LessEqual additive
    (89) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 84 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 84 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 84 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 84 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 84 (equality -> equality NotEqual relational .)
    And             reduce using rule 84 (equality -> equality NotEqual relational .)
    Question        reduce using rule 84 (equality -> equality NotEqual relational .)
    Or              reduce using rule 84 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 84 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 84 (equality -> equality NotEqual relational .)
    Comma           reduce using rule 84 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 84 (equality -> equality NotEqual relational .)
    Less            shift and go to state 81
    Greater         shift and go to state 82
    LessEqual       shift and go to state 83
    GreaterEqual    shift and go to state 84


state 116

    (85) equality -> equality Equal relational .
    (86) relational -> relational . Less additive
    (87) relational -> relational . Greater additive
    (88) relational -> relational . LessEqual additive
    (89) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 85 (equality -> equality Equal relational .)
    Equal           reduce using rule 85 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 85 (equality -> equality Equal relational .)
    Xor             reduce using rule 85 (equality -> equality Equal relational .)
    BitOr           reduce using rule 85 (equality -> equality Equal relational .)
    And             reduce using rule 85 (equality -> equality Equal relational .)
    Question        reduce using rule 85 (equality -> equality Equal relational .)
    Or              reduce using rule 85 (equality -> equality Equal relational .)
    Semi            reduce using rule 85 (equality -> equality Equal relational .)
    RParen          reduce using rule 85 (equality -> equality Equal relational .)
    Comma           reduce using rule 85 (equality -> equality Equal relational .)
    Colon           reduce using rule 85 (equality -> equality Equal relational .)
    Less            shift and go to state 81
    Greater         shift and go to state 82
    LessEqual       shift and go to state 83
    GreaterEqual    shift and go to state 84


state 117

    (86) relational -> relational Less additive .
    (90) additive -> additive . Plus multiplicative
    (91) additive -> additive . Minus multiplicative

    Less            reduce using rule 86 (relational -> relational Less additive .)
    Greater         reduce using rule 86 (relational -> relational Less additive .)
    LessEqual       reduce using rule 86 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 86 (relational -> relational Less additive .)
    NotEqual        reduce using rule 86 (relational -> relational Less additive .)
    Equal           reduce using rule 86 (relational -> relational Less additive .)
    BitAnd          reduce using rule 86 (relational -> relational Less additive .)
    Xor             reduce using rule 86 (relational -> relational Less additive .)
    BitOr           reduce using rule 86 (relational -> relational Less additive .)
    And             reduce using rule 86 (relational -> relational Less additive .)
    Question        reduce using rule 86 (relational -> relational Less additive .)
    Or              reduce using rule 86 (relational -> relational Less additive .)
    Semi            reduce using rule 86 (relational -> relational Less additive .)
    RParen          reduce using rule 86 (relational -> relational Less additive .)
    Comma           reduce using rule 86 (relational -> relational Less additive .)
    Colon           reduce using rule 86 (relational -> relational Less additive .)
    Plus            shift and go to state 85
    Minus           shift and go to state 86


state 118

    (87) relational -> relational Greater additive .
    (90) additive -> additive . Plus multiplicative
    (91) additive -> additive . Minus multiplicative

    Less            reduce using rule 87 (relational -> relational Greater additive .)
    Greater         reduce using rule 87 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 87 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 87 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 87 (relational -> relational Greater additive .)
    Equal           reduce using rule 87 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 87 (relational -> relational Greater additive .)
    Xor             reduce using rule 87 (relational -> relational Greater additive .)
    BitOr           reduce using rule 87 (relational -> relational Greater additive .)
    And             reduce using rule 87 (relational -> relational Greater additive .)
    Question        reduce using rule 87 (relational -> relational Greater additive .)
    Or              reduce using rule 87 (relational -> relational Greater additive .)
    Semi            reduce using rule 87 (relational -> relational Greater additive .)
    RParen          reduce using rule 87 (relational -> relational Greater additive .)
    Comma           reduce using rule 87 (relational -> relational Greater additive .)
    Colon           reduce using rule 87 (relational -> relational Greater additive .)
    Plus            shift and go to state 85
    Minus           shift and go to state 86


state 119

    (88) relational -> relational LessEqual additive .
    (90) additive -> additive . Plus multiplicative
    (91) additive -> additive . Minus multiplicative

    Less            reduce using rule 88 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 88 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 88 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 88 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 88 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 88 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 88 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 88 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 88 (relational -> relational LessEqual additive .)
    And             reduce using rule 88 (relational -> relational LessEqual additive .)
    Question        reduce using rule 88 (relational -> relational LessEqual additive .)
    Or              reduce using rule 88 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 88 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 88 (relational -> relational LessEqual additive .)
    Comma           reduce using rule 88 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 88 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 85
    Minus           shift and go to state 86


state 120

    (89) relational -> relational GreaterEqual additive .
    (90) additive -> additive . Plus multiplicative
    (91) additive -> additive . Minus multiplicative

    Less            reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 89 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 89 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 89 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 89 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 89 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 89 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 89 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Comma           reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 89 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 85
    Minus           shift and go to state 86


state 121

    (90) additive -> additive Plus multiplicative .
    (92) multiplicative -> multiplicative . Mul unary
    (93) multiplicative -> multiplicative . Div unary
    (94) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 90 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 90 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 90 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 90 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 90 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 90 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 90 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 90 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 90 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 90 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 90 (additive -> additive Plus multiplicative .)
    And             reduce using rule 90 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 90 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 90 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 90 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 90 (additive -> additive Plus multiplicative .)
    Comma           reduce using rule 90 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 90 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 87
    Div             shift and go to state 88
    Mod             shift and go to state 89


state 122

    (91) additive -> additive Minus multiplicative .
    (92) multiplicative -> multiplicative . Mul unary
    (93) multiplicative -> multiplicative . Div unary
    (94) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 91 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 91 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 91 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 91 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 91 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 91 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 91 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 91 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 91 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 91 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 91 (additive -> additive Minus multiplicative .)
    And             reduce using rule 91 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 91 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 91 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 91 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 91 (additive -> additive Minus multiplicative .)
    Comma           reduce using rule 91 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 91 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 87
    Div             shift and go to state 88
    Mod             shift and go to state 89


state 123

    (92) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Comma           reduce using rule 92 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 92 (multiplicative -> multiplicative Mul unary .)


state 124

    (93) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Comma           reduce using rule 93 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 93 (multiplicative -> multiplicative Div unary .)


state 125

    (94) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Comma           reduce using rule 94 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 94 (multiplicative -> multiplicative Mod unary .)


state 126

    (59) declaration -> type Identifier Assign expression .

    Semi            reduce using rule 59 (declaration -> type Identifier Assign expression .)


state 127

    (74) postfix -> Identifier LParen expressionlist RParen .

    Mul             reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    Div             reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    Mod             reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    Plus            reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    Minus           reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    Less            reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    Greater         reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    LessEqual       reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    GreaterEqual    reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    NotEqual        reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    Equal           reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    BitAnd          reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    Xor             reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    BitOr           reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    And             reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    Question        reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    Or              reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    Semi            reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    RParen          reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    Comma           reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)
    Colon           reduce using rule 74 (postfix -> Identifier LParen expressionlist RParen .)


state 128

    (13) expressionlist -> expressionlist Comma . expression
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 138
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 129

    (20) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (21) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (22) statement_unmatched -> If LParen expression RParen . statement
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (18) statement -> . statement_matched
    (19) statement -> . statement_unmatched
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 139
    statement_unmatched            shift and go to state 29
    statement                      shift and go to state 140
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 130

    (23) statement_matched -> While LParen expression RParen . statement_matched
    (24) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 141
    statement_unmatched            shift and go to state 142
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 131

    (25) statement_matched -> For LParen expression Semi . expression Semi expression RParen statement_matched
    (31) statement_matched -> For LParen expression Semi . Semi expression RParen statement_matched
    (35) statement_matched -> For LParen expression Semi . expression Semi RParen statement_matched
    (39) statement_matched -> For LParen expression Semi . Semi RParen statement_matched
    (27) statement_unmatched -> For LParen expression Semi . expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> For LParen expression Semi . Semi expression RParen statement_unmatched
    (37) statement_unmatched -> For LParen expression Semi . expression Semi RParen statement_unmatched
    (41) statement_unmatched -> For LParen expression Semi . Semi RParen statement_unmatched
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Semi            shift and go to state 144
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 143
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 132

    (45) statement_matched -> For LParen Semi Semi . expression RParen statement_matched
    (47) statement_matched -> For LParen Semi Semi . RParen statement_matched
    (46) statement_unmatched -> For LParen Semi Semi . expression RParen statement_unmatched
    (48) statement_unmatched -> For LParen Semi Semi . RParen statement_unmatched
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RParen          shift and go to state 146
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 145
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 133

    (29) statement_matched -> For LParen Semi expression . Semi expression RParen statement_matched
    (43) statement_matched -> For LParen Semi expression . Semi RParen statement_matched
    (30) statement_unmatched -> For LParen Semi expression . Semi expression RParen statement_unmatched
    (44) statement_unmatched -> For LParen Semi expression . Semi RParen statement_unmatched

    Semi            shift and go to state 147


state 134

    (26) statement_matched -> For LParen declaration Semi . expression Semi expression RParen statement_matched
    (32) statement_matched -> For LParen declaration Semi . Semi expression RParen statement_matched
    (36) statement_matched -> For LParen declaration Semi . expression Semi RParen statement_matched
    (40) statement_matched -> For LParen declaration Semi . Semi RParen statement_matched
    (28) statement_unmatched -> For LParen declaration Semi . expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> For LParen declaration Semi . Semi expression RParen statement_unmatched
    (38) statement_unmatched -> For LParen declaration Semi . expression Semi RParen statement_unmatched
    (42) statement_unmatched -> For LParen declaration Semi . Semi RParen statement_unmatched
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Semi            shift and go to state 148
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 149
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 135

    (49) statement_matched -> Do statement_matched While LParen . expression RParen Semi
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 150
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 136

    (50) statement_unmatched -> Do statement_unmatched While LParen . expression RParen Semi
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 151
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 137

    (95) conditional -> logical_or Question expression Colon . conditional
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 91
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    logical_or                     shift and go to state 42
    conditional                    shift and go to state 152
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 138

    (13) expressionlist -> expressionlist Comma expression .

    RParen          reduce using rule 13 (expressionlist -> expressionlist Comma expression .)
    Comma           reduce using rule 13 (expressionlist -> expressionlist Comma expression .)


state 139

    (20) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (21) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (18) statement -> statement_matched .

    Else            shift and go to state 153
    RBrace          reduce using rule 18 (statement -> statement_matched .)
    If              reduce using rule 18 (statement -> statement_matched .)
    While           reduce using rule 18 (statement -> statement_matched .)
    For             reduce using rule 18 (statement -> statement_matched .)
    Do              reduce using rule 18 (statement -> statement_matched .)
    Return          reduce using rule 18 (statement -> statement_matched .)
    LBrace          reduce using rule 18 (statement -> statement_matched .)
    Break           reduce using rule 18 (statement -> statement_matched .)
    Continue        reduce using rule 18 (statement -> statement_matched .)
    Int             reduce using rule 18 (statement -> statement_matched .)
    Identifier      reduce using rule 18 (statement -> statement_matched .)
    Minus           reduce using rule 18 (statement -> statement_matched .)
    BitNot          reduce using rule 18 (statement -> statement_matched .)
    Not             reduce using rule 18 (statement -> statement_matched .)
    Integer         reduce using rule 18 (statement -> statement_matched .)
    LParen          reduce using rule 18 (statement -> statement_matched .)
    Semi            reduce using rule 18 (statement -> statement_matched .)


state 140

    (22) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement .)


state 141

    (23) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 23 (statement_matched -> While LParen expression RParen statement_matched .)


state 142

    (24) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 24 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 143

    (25) statement_matched -> For LParen expression Semi expression . Semi expression RParen statement_matched
    (35) statement_matched -> For LParen expression Semi expression . Semi RParen statement_matched
    (27) statement_unmatched -> For LParen expression Semi expression . Semi expression RParen statement_unmatched
    (37) statement_unmatched -> For LParen expression Semi expression . Semi RParen statement_unmatched

    Semi            shift and go to state 154


state 144

    (31) statement_matched -> For LParen expression Semi Semi . expression RParen statement_matched
    (39) statement_matched -> For LParen expression Semi Semi . RParen statement_matched
    (33) statement_unmatched -> For LParen expression Semi Semi . expression RParen statement_unmatched
    (41) statement_unmatched -> For LParen expression Semi Semi . RParen statement_unmatched
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RParen          shift and go to state 156
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 155
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 145

    (45) statement_matched -> For LParen Semi Semi expression . RParen statement_matched
    (46) statement_unmatched -> For LParen Semi Semi expression . RParen statement_unmatched

    RParen          shift and go to state 157


state 146

    (47) statement_matched -> For LParen Semi Semi RParen . statement_matched
    (48) statement_unmatched -> For LParen Semi Semi RParen . statement_unmatched
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    statement_matched              shift and go to state 158
    statement_unmatched            shift and go to state 159
    expression                     shift and go to state 30
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 147

    (29) statement_matched -> For LParen Semi expression Semi . expression RParen statement_matched
    (43) statement_matched -> For LParen Semi expression Semi . RParen statement_matched
    (30) statement_unmatched -> For LParen Semi expression Semi . expression RParen statement_unmatched
    (44) statement_unmatched -> For LParen Semi expression Semi . RParen statement_unmatched
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RParen          shift and go to state 161
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 160
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 148

    (32) statement_matched -> For LParen declaration Semi Semi . expression RParen statement_matched
    (40) statement_matched -> For LParen declaration Semi Semi . RParen statement_matched
    (34) statement_unmatched -> For LParen declaration Semi Semi . expression RParen statement_unmatched
    (42) statement_unmatched -> For LParen declaration Semi Semi . RParen statement_unmatched
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RParen          shift and go to state 163
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 162
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 149

    (26) statement_matched -> For LParen declaration Semi expression . Semi expression RParen statement_matched
    (36) statement_matched -> For LParen declaration Semi expression . Semi RParen statement_matched
    (28) statement_unmatched -> For LParen declaration Semi expression . Semi expression RParen statement_unmatched
    (38) statement_unmatched -> For LParen declaration Semi expression . Semi RParen statement_unmatched

    Semi            shift and go to state 164


state 150

    (49) statement_matched -> Do statement_matched While LParen expression . RParen Semi

    RParen          shift and go to state 165


state 151

    (50) statement_unmatched -> Do statement_unmatched While LParen expression . RParen Semi

    RParen          shift and go to state 166


state 152

    (95) conditional -> logical_or Question expression Colon conditional .

    Semi            reduce using rule 95 (conditional -> logical_or Question expression Colon conditional .)
    RParen          reduce using rule 95 (conditional -> logical_or Question expression Colon conditional .)
    Comma           reduce using rule 95 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 95 (conditional -> logical_or Question expression Colon conditional .)


state 153

    (20) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (21) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 167
    statement_unmatched            shift and go to state 168
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 154

    (25) statement_matched -> For LParen expression Semi expression Semi . expression RParen statement_matched
    (35) statement_matched -> For LParen expression Semi expression Semi . RParen statement_matched
    (27) statement_unmatched -> For LParen expression Semi expression Semi . expression RParen statement_unmatched
    (37) statement_unmatched -> For LParen expression Semi expression Semi . RParen statement_unmatched
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RParen          shift and go to state 170
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 169
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 155

    (31) statement_matched -> For LParen expression Semi Semi expression . RParen statement_matched
    (33) statement_unmatched -> For LParen expression Semi Semi expression . RParen statement_unmatched

    RParen          shift and go to state 171


state 156

    (39) statement_matched -> For LParen expression Semi Semi RParen . statement_matched
    (41) statement_unmatched -> For LParen expression Semi Semi RParen . statement_unmatched
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 172
    statement_unmatched            shift and go to state 173
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 157

    (45) statement_matched -> For LParen Semi Semi expression RParen . statement_matched
    (46) statement_unmatched -> For LParen Semi Semi expression RParen . statement_unmatched
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 174
    statement_unmatched            shift and go to state 175
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 158

    (47) statement_matched -> For LParen Semi Semi RParen statement_matched .

    RBrace          reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    If              reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    While           reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    For             reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Do              reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Return          reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    LBrace          reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Break           reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Continue        reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Int             reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Identifier      reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Minus           reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    BitNot          reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Not             reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Integer         reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    LParen          reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Semi            reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Else            reduce using rule 47 (statement_matched -> For LParen Semi Semi RParen statement_matched .)


state 159

    (48) statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .

    RBrace          reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    If              reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    While           reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    For             reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Do              reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Return          reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    LBrace          reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Break           reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Continue        reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Int             reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Identifier      reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Minus           reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    BitNot          reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Not             reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Integer         reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    LParen          reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Semi            reduce using rule 48 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)


state 160

    (29) statement_matched -> For LParen Semi expression Semi expression . RParen statement_matched
    (30) statement_unmatched -> For LParen Semi expression Semi expression . RParen statement_unmatched

    RParen          shift and go to state 176


state 161

    (43) statement_matched -> For LParen Semi expression Semi RParen . statement_matched
    (44) statement_unmatched -> For LParen Semi expression Semi RParen . statement_unmatched
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 177
    statement_unmatched            shift and go to state 178
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 162

    (32) statement_matched -> For LParen declaration Semi Semi expression . RParen statement_matched
    (34) statement_unmatched -> For LParen declaration Semi Semi expression . RParen statement_unmatched

    RParen          shift and go to state 179


state 163

    (40) statement_matched -> For LParen declaration Semi Semi RParen . statement_matched
    (42) statement_unmatched -> For LParen declaration Semi Semi RParen . statement_unmatched
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    statement_matched              shift and go to state 180
    statement_unmatched            shift and go to state 181
    expression                     shift and go to state 30
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 164

    (26) statement_matched -> For LParen declaration Semi expression Semi . expression RParen statement_matched
    (36) statement_matched -> For LParen declaration Semi expression Semi . RParen statement_matched
    (28) statement_unmatched -> For LParen declaration Semi expression Semi . expression RParen statement_unmatched
    (38) statement_unmatched -> For LParen declaration Semi expression Semi . RParen statement_unmatched
    (60) expression -> . assignment
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    RParen          shift and go to state 183
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 182
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 165

    (49) statement_matched -> Do statement_matched While LParen expression RParen . Semi

    Semi            shift and go to state 184


state 166

    (50) statement_unmatched -> Do statement_unmatched While LParen expression RParen . Semi

    Semi            shift and go to state 185


state 167

    (20) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 20 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 168

    (21) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)


state 169

    (25) statement_matched -> For LParen expression Semi expression Semi expression . RParen statement_matched
    (27) statement_unmatched -> For LParen expression Semi expression Semi expression . RParen statement_unmatched

    RParen          shift and go to state 186


state 170

    (35) statement_matched -> For LParen expression Semi expression Semi RParen . statement_matched
    (37) statement_unmatched -> For LParen expression Semi expression Semi RParen . statement_unmatched
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 187
    statement_unmatched            shift and go to state 188
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 171

    (31) statement_matched -> For LParen expression Semi Semi expression RParen . statement_matched
    (33) statement_unmatched -> For LParen expression Semi Semi expression RParen . statement_unmatched
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 189
    statement_unmatched            shift and go to state 190
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 172

    (39) statement_matched -> For LParen expression Semi Semi RParen statement_matched .

    RBrace          reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    If              reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    While           reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    For             reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Do              reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Return          reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    LBrace          reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Break           reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Continue        reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Int             reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Identifier      reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Minus           reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    BitNot          reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Not             reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Integer         reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    LParen          reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Semi            reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Else            reduce using rule 39 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)


state 173

    (41) statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .

    RBrace          reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    If              reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    While           reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    For             reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Do              reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Return          reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    LBrace          reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Break           reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Continue        reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Int             reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Identifier      reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Minus           reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    BitNot          reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Not             reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Integer         reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    LParen          reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Semi            reduce using rule 41 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)


state 174

    (45) statement_matched -> For LParen Semi Semi expression RParen statement_matched .

    RBrace          reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    If              reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    While           reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    For             reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Do              reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Return          reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    LBrace          reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Break           reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Continue        reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Int             reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Identifier      reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Minus           reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    BitNot          reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Not             reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Integer         reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    LParen          reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Semi            reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Else            reduce using rule 45 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)


state 175

    (46) statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    If              reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    While           reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    For             reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Do              reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Return          reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Break           reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Int             reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Not             reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 46 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)


state 176

    (29) statement_matched -> For LParen Semi expression Semi expression RParen . statement_matched
    (30) statement_unmatched -> For LParen Semi expression Semi expression RParen . statement_unmatched
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 191
    statement_unmatched            shift and go to state 192
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 177

    (43) statement_matched -> For LParen Semi expression Semi RParen statement_matched .

    RBrace          reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    If              reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    While           reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    For             reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Do              reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Return          reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    LBrace          reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Break           reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Continue        reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Int             reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Identifier      reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Minus           reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    BitNot          reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Not             reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Integer         reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    LParen          reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Semi            reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Else            reduce using rule 43 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)


state 178

    (44) statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .

    RBrace          reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    If              reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    While           reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    For             reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Do              reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Return          reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    LBrace          reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Break           reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Continue        reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Int             reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Identifier      reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Minus           reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    BitNot          reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Not             reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Integer         reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    LParen          reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Semi            reduce using rule 44 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)


state 179

    (32) statement_matched -> For LParen declaration Semi Semi expression RParen . statement_matched
    (34) statement_unmatched -> For LParen declaration Semi Semi expression RParen . statement_unmatched
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 193
    statement_unmatched            shift and go to state 194
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 180

    (40) statement_matched -> For LParen declaration Semi Semi RParen statement_matched .

    RBrace          reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    If              reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    While           reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    For             reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Do              reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Return          reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    LBrace          reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Break           reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Continue        reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Int             reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Identifier      reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Minus           reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    BitNot          reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Not             reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Integer         reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    LParen          reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Semi            reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Else            reduce using rule 40 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)


state 181

    (42) statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .

    RBrace          reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    If              reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    While           reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    For             reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Do              reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Return          reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    LBrace          reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Break           reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Continue        reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Int             reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Identifier      reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Minus           reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    BitNot          reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Not             reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Integer         reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    LParen          reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Semi            reduce using rule 42 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)


state 182

    (26) statement_matched -> For LParen declaration Semi expression Semi expression . RParen statement_matched
    (28) statement_unmatched -> For LParen declaration Semi expression Semi expression . RParen statement_unmatched

    RParen          shift and go to state 195


state 183

    (36) statement_matched -> For LParen declaration Semi expression Semi RParen . statement_matched
    (38) statement_unmatched -> For LParen declaration Semi expression Semi RParen . statement_unmatched
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 196
    statement_unmatched            shift and go to state 197
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 184

    (49) statement_matched -> Do statement_matched While LParen expression RParen Semi .

    RBrace          reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    If              reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    While           reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    For             reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Do              reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Return          reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LBrace          reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Break           reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Continue        reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Int             reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Identifier      reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Minus           reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    BitNot          reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Not             reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Integer         reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LParen          reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Semi            reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Else            reduce using rule 49 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)


state 185

    (50) statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .

    RBrace          reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    If              reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    While           reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    For             reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Do              reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Return          reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LBrace          reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Break           reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Continue        reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Int             reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Identifier      reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Minus           reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    BitNot          reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Not             reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Integer         reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LParen          reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Semi            reduce using rule 50 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)


state 186

    (25) statement_matched -> For LParen expression Semi expression Semi expression RParen . statement_matched
    (27) statement_unmatched -> For LParen expression Semi expression Semi expression RParen . statement_unmatched
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 198
    statement_unmatched            shift and go to state 199
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 187

    (35) statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .

    RBrace          reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    If              reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    While           reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    For             reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Do              reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Return          reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    LBrace          reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Break           reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Continue        reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Int             reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Identifier      reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Minus           reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    BitNot          reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Not             reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Integer         reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    LParen          reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Semi            reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Else            reduce using rule 35 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)


state 188

    (37) statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .

    RBrace          reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    If              reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    While           reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    For             reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Do              reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Return          reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    LBrace          reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Break           reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Continue        reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Int             reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Identifier      reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Minus           reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    BitNot          reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Not             reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Integer         reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    LParen          reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Semi            reduce using rule 37 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)


state 189

    (31) statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .

    RBrace          reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    If              reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    While           reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    For             reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Do              reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Return          reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    LBrace          reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Break           reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Continue        reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Int             reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Identifier      reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Minus           reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    BitNot          reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Not             reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Integer         reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    LParen          reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Semi            reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Else            reduce using rule 31 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)


state 190

    (33) statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    If              reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    While           reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    For             reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Do              reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Return          reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Break           reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Int             reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Not             reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 33 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)


state 191

    (29) statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .

    RBrace          reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    If              reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    While           reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    For             reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Do              reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Return          reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    LBrace          reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Break           reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Continue        reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Int             reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Identifier      reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Minus           reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    BitNot          reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Not             reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Integer         reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    LParen          reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Semi            reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Else            reduce using rule 29 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)


state 192

    (30) statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    If              reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    While           reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    For             reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Do              reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Return          reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Break           reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Int             reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Not             reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 30 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)


state 193

    (32) statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .

    RBrace          reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    If              reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    While           reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    For             reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Do              reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Return          reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    LBrace          reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Break           reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Continue        reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Int             reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Identifier      reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Minus           reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    BitNot          reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Not             reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Integer         reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    LParen          reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Semi            reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Else            reduce using rule 32 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)


state 194

    (34) statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    If              reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    While           reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    For             reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Do              reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Return          reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Break           reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Int             reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Not             reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 34 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)


state 195

    (26) statement_matched -> For LParen declaration Semi expression Semi expression RParen . statement_matched
    (28) statement_unmatched -> For LParen declaration Semi expression Semi expression RParen . statement_unmatched
    (20) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (23) statement_matched -> . While LParen expression RParen statement_matched
    (25) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (26) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (29) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (35) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (36) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (39) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (40) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (43) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (45) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (47) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (49) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (51) statement_matched -> . Return expression Semi
    (52) statement_matched -> . opt_expression Semi
    (53) statement_matched -> . LBrace block RBrace
    (54) statement_matched -> . Break Semi
    (55) statement_matched -> . Continue Semi
    (21) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement
    (24) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (28) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (30) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (37) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (38) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (41) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (44) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (48) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (50) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (56) opt_expression -> . expression
    (57) opt_expression -> . empty
    (60) expression -> . assignment
    (1) empty -> .
    (61) assignment -> . conditional
    (78) assignment -> . Identifier Assign expression
    (62) conditional -> . logical_or
    (95) conditional -> . logical_or Question expression Colon conditional
    (63) logical_or -> . logical_and
    (79) logical_or -> . logical_or Or logical_and
    (64) logical_and -> . bit_or
    (80) logical_and -> . logical_and And bit_or
    (65) bit_or -> . xor
    (81) bit_or -> . bit_or BitOr xor
    (66) xor -> . bit_and
    (82) xor -> . xor Xor bit_and
    (67) bit_and -> . equality
    (83) bit_and -> . bit_and BitAnd equality
    (68) equality -> . relational
    (84) equality -> . equality NotEqual relational
    (85) equality -> . equality Equal relational
    (69) relational -> . additive
    (86) relational -> . relational Less additive
    (87) relational -> . relational Greater additive
    (88) relational -> . relational LessEqual additive
    (89) relational -> . relational GreaterEqual additive
    (70) additive -> . multiplicative
    (90) additive -> . additive Plus multiplicative
    (91) additive -> . additive Minus multiplicative
    (71) multiplicative -> . unary
    (92) multiplicative -> . multiplicative Mul unary
    (93) multiplicative -> . multiplicative Div unary
    (94) multiplicative -> . multiplicative Mod unary
    (72) unary -> . postfix
    (75) unary -> . Minus unary
    (76) unary -> . BitNot unary
    (77) unary -> . Not unary
    (73) postfix -> . primary
    (74) postfix -> . Identifier LParen expressionlist RParen
    (96) primary -> . Integer
    (97) primary -> . Identifier
    (98) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 34
    Return          shift and go to state 35
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 200
    statement_unmatched            shift and go to state 201
    opt_expression                 shift and go to state 36
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 196

    (36) statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .

    RBrace          reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    If              reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    While           reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    For             reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Do              reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Return          reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    LBrace          reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Break           reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Continue        reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Int             reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Identifier      reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Minus           reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    BitNot          reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Not             reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Integer         reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    LParen          reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Semi            reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Else            reduce using rule 36 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)


state 197

    (38) statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .

    RBrace          reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    If              reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    While           reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    For             reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Do              reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Return          reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    LBrace          reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Break           reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Continue        reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Int             reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Identifier      reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Minus           reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    BitNot          reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Not             reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Integer         reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    LParen          reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Semi            reduce using rule 38 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)


state 198

    (25) statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .

    RBrace          reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    If              reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    While           reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    For             reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Do              reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Return          reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    LBrace          reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Break           reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Continue        reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Int             reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Identifier      reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Minus           reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    BitNot          reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Not             reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Integer         reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    LParen          reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Semi            reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Else            reduce using rule 25 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)


state 199

    (27) statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    If              reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    While           reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    For             reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Do              reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Return          reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Break           reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Int             reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Not             reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 27 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)


state 200

    (26) statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .

    RBrace          reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    If              reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    While           reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    For             reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Do              reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Return          reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    LBrace          reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Break           reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Continue        reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Int             reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Identifier      reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Minus           reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    BitNot          reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Not             reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Integer         reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    LParen          reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Semi            reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Else            reduce using rule 26 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)


state 201

    (28) statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    If              reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    While           reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    For             reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Do              reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Return          reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Break           reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Int             reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Not             reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 28 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)

