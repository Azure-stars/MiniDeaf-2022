Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> empty
Rule 3     program -> program function
Rule 4     program -> program globaldeclaration
Rule 5     globaldeclaration -> type Identifier Semi
Rule 6     globaldeclaration -> type Identifier Assign expression Semi
Rule 7     globaldeclaration -> type Identifier indexlist Semi
Rule 8     globaldeclaration -> type Identifier indexlist Assign expression Semi
Rule 9     type -> Int
Rule 10    function -> type Identifier LParen parameterlist RParen Semi
Rule 11    function -> type Identifier LParen parameterlist RParen LBrace block RBrace
Rule 12    parameterlist -> empty
Rule 13    parameterlist -> parameter
Rule 14    parameterlist -> parameterlist Comma parameter
Rule 15    parameter -> type Identifier
Rule 16    expressionlist -> empty
Rule 17    expressionlist -> expression
Rule 18    expressionlist -> expressionlist Comma expression
Rule 19    block -> block block_item
Rule 20    block -> empty
Rule 21    block_item -> statement
Rule 22    block_item -> declaration Semi
Rule 23    statement -> statement_matched
Rule 24    statement -> statement_unmatched
Rule 25    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 26    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 27    statement_unmatched -> If LParen expression RParen statement
Rule 28    statement_matched -> While LParen expression RParen statement_matched
Rule 29    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 30    statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched
Rule 31    statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched
Rule 32    statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched
Rule 33    statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched
Rule 34    statement_matched -> For LParen Semi expression Semi expression RParen statement_matched
Rule 35    statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched
Rule 36    statement_matched -> For LParen expression Semi Semi expression RParen statement_matched
Rule 37    statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched
Rule 38    statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched
Rule 39    statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched
Rule 40    statement_matched -> For LParen expression Semi expression Semi RParen statement_matched
Rule 41    statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched
Rule 42    statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched
Rule 43    statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched
Rule 44    statement_matched -> For LParen expression Semi Semi RParen statement_matched
Rule 45    statement_matched -> For LParen declaration Semi Semi RParen statement_matched
Rule 46    statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched
Rule 47    statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched
Rule 48    statement_matched -> For LParen Semi expression Semi RParen statement_matched
Rule 49    statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched
Rule 50    statement_matched -> For LParen Semi Semi expression RParen statement_matched
Rule 51    statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched
Rule 52    statement_matched -> For LParen Semi Semi RParen statement_matched
Rule 53    statement_unmatched -> For LParen Semi Semi RParen statement_unmatched
Rule 54    statement_matched -> Do statement_matched While LParen expression RParen Semi
Rule 55    statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi
Rule 56    statement_matched -> Return expression Semi
Rule 57    statement_matched -> opt_expression Semi
Rule 58    statement_matched -> LBrace block RBrace
Rule 59    statement_matched -> Break Semi
Rule 60    statement_matched -> Continue Semi
Rule 61    opt_expression -> expression
Rule 62    opt_expression -> empty
Rule 63    declaration -> type Identifier
Rule 64    declaration -> type Identifier Assign expression
Rule 65    declaration -> type Identifier indexlist
Rule 66    declaration -> type Identifier indexlist Assign expression
Rule 67    indexlist -> indexlist LMidBrace Integer RMidBrace
Rule 68    indexlist -> empty
Rule 69    expression -> assignment
Rule 70    assignment -> conditional
Rule 71    conditional -> logical_or
Rule 72    logical_or -> logical_and
Rule 73    logical_and -> bit_or
Rule 74    bit_or -> xor
Rule 75    xor -> bit_and
Rule 76    bit_and -> equality
Rule 77    equality -> relational
Rule 78    relational -> additive
Rule 79    additive -> multiplicative
Rule 80    multiplicative -> unary
Rule 81    unary -> postfix
Rule 82    postfix -> primary
Rule 83    postfix -> Identifier LParen expressionlist RParen
Rule 84    postfix -> postfix_array LMidBrace expression RMidBrace
Rule 85    postfix_array -> postfix_array LMidBrace expression RMidBrace
Rule 86    postfix_array -> primary
Rule 87    unary -> Minus unary
Rule 88    unary -> BitNot unary
Rule 89    unary -> Not unary
Rule 90    assignment -> postfix Assign expression
Rule 91    logical_or -> logical_or Or logical_and
Rule 92    logical_and -> logical_and And bit_or
Rule 93    bit_or -> bit_or BitOr xor
Rule 94    xor -> xor Xor bit_and
Rule 95    bit_and -> bit_and BitAnd equality
Rule 96    equality -> equality NotEqual relational
Rule 97    equality -> equality Equal relational
Rule 98    relational -> relational Less additive
Rule 99    relational -> relational Greater additive
Rule 100   relational -> relational LessEqual additive
Rule 101   relational -> relational GreaterEqual additive
Rule 102   additive -> additive Plus multiplicative
Rule 103   additive -> additive Minus multiplicative
Rule 104   multiplicative -> multiplicative Mul unary
Rule 105   multiplicative -> multiplicative Div unary
Rule 106   multiplicative -> multiplicative Mod unary
Rule 107   conditional -> logical_or Question expression Colon conditional
Rule 108   primary -> Integer
Rule 109   primary -> Identifier
Rule 110   primary -> LParen expression RParen

Terminals, with rules where they appear

And                  : 92
Assign               : 6 8 64 66 90
BitAnd               : 95
BitNot               : 88
BitOr                : 93
Break                : 59
Colon                : 107
Comma                : 14 18
Continue             : 60
Div                  : 105
Do                   : 54 55
Else                 : 25 26
Equal                : 97
For                  : 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53
Greater              : 99
GreaterEqual         : 101
Identifier           : 5 6 7 8 10 11 15 63 64 65 66 83 109
If                   : 25 26 27
Int                  : 9
Integer              : 67 108
LBrace               : 11 58
LMidBrace            : 67 84 85
LParen               : 10 11 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 83 110
Less                 : 98
LessEqual            : 100
Minus                : 87 103
Mod                  : 106
Mul                  : 104
Not                  : 89
NotEqual             : 96
Or                   : 91
Plus                 : 102
Question             : 107
RBrace               : 11 58
RMidBrace            : 67 84 85
RParen               : 10 11 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 83 110
Return               : 56
Semi                 : 5 6 7 8 10 22 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 55 56 57 59 60
While                : 28 29 54 55
Xor                  : 94
error                : 

Nonterminals, with rules where they appear

additive             : 78 98 99 100 101 102 103
assignment           : 69
bit_and              : 75 94 95
bit_or               : 73 92 93
block                : 11 19 58
block_item           : 19
conditional          : 70 107
declaration          : 22 31 33 37 39 41 43 45 47
empty                : 2 12 16 20 62 68
equality             : 76 95 96 97
expression           : 6 8 17 18 25 26 27 28 29 30 30 30 31 31 32 32 32 33 33 34 34 35 35 36 36 37 38 38 39 40 40 41 42 42 43 44 46 48 49 50 51 54 55 56 61 64 66 84 85 90 107 110
expressionlist       : 18 83
function             : 3
globaldeclaration    : 4
indexlist            : 7 8 65 66 67
logical_and          : 72 91 92
logical_or           : 71 91 107
multiplicative       : 79 102 103 104 105 106
opt_expression       : 57
parameter            : 13 14
parameterlist        : 10 11 14
postfix              : 81 90
postfix_array        : 84 85
primary              : 82 86
program              : 3 4 0
relational           : 77 96 97 98 99 100 101
statement            : 21 27
statement_matched    : 23 25 25 26 28 30 31 34 36 37 40 41 44 45 48 50 52 54
statement_unmatched  : 24 26 29 32 33 35 38 39 42 43 46 47 49 51 53 55
type                 : 5 6 7 8 10 11 15 63 64 65 66
unary                : 80 87 88 89 104 105 106
xor                  : 74 93 94

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . empty
    (3) program -> . program function
    (4) program -> . program globaldeclaration
    (1) empty -> .

    Int             reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)

    program                        shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> program .
    (3) program -> program . function
    (4) program -> program . globaldeclaration
    (10) function -> . type Identifier LParen parameterlist RParen Semi
    (11) function -> . type Identifier LParen parameterlist RParen LBrace block RBrace
    (5) globaldeclaration -> . type Identifier Semi
    (6) globaldeclaration -> . type Identifier Assign expression Semi
    (7) globaldeclaration -> . type Identifier indexlist Semi
    (8) globaldeclaration -> . type Identifier indexlist Assign expression Semi
    (9) type -> . Int

    Int             shift and go to state 6

    function                       shift and go to state 3
    globaldeclaration              shift and go to state 4
    type                           shift and go to state 5

state 2

    (2) program -> empty .

    Int             reduce using rule 2 (program -> empty .)
    $end            reduce using rule 2 (program -> empty .)


state 3

    (3) program -> program function .

    Int             reduce using rule 3 (program -> program function .)
    $end            reduce using rule 3 (program -> program function .)


state 4

    (4) program -> program globaldeclaration .

    Int             reduce using rule 4 (program -> program globaldeclaration .)
    $end            reduce using rule 4 (program -> program globaldeclaration .)


state 5

    (10) function -> type . Identifier LParen parameterlist RParen Semi
    (11) function -> type . Identifier LParen parameterlist RParen LBrace block RBrace
    (5) globaldeclaration -> type . Identifier Semi
    (6) globaldeclaration -> type . Identifier Assign expression Semi
    (7) globaldeclaration -> type . Identifier indexlist Semi
    (8) globaldeclaration -> type . Identifier indexlist Assign expression Semi

    Identifier      shift and go to state 7


state 6

    (9) type -> Int .

    Identifier      reduce using rule 9 (type -> Int .)


state 7

    (10) function -> type Identifier . LParen parameterlist RParen Semi
    (11) function -> type Identifier . LParen parameterlist RParen LBrace block RBrace
    (5) globaldeclaration -> type Identifier . Semi
    (6) globaldeclaration -> type Identifier . Assign expression Semi
    (7) globaldeclaration -> type Identifier . indexlist Semi
    (8) globaldeclaration -> type Identifier . indexlist Assign expression Semi
    (67) indexlist -> . indexlist LMidBrace Integer RMidBrace
    (68) indexlist -> . empty
    (1) empty -> .

  ! shift/reduce conflict for Semi resolved as shift
  ! shift/reduce conflict for Assign resolved as shift
    LParen          shift and go to state 8
    Semi            shift and go to state 9
    Assign          shift and go to state 10
    LMidBrace       reduce using rule 1 (empty -> .)

  ! Semi            [ reduce using rule 1 (empty -> .) ]
  ! Assign          [ reduce using rule 1 (empty -> .) ]

    indexlist                      shift and go to state 11
    empty                          shift and go to state 12

state 8

    (10) function -> type Identifier LParen . parameterlist RParen Semi
    (11) function -> type Identifier LParen . parameterlist RParen LBrace block RBrace
    (12) parameterlist -> . empty
    (13) parameterlist -> . parameter
    (14) parameterlist -> . parameterlist Comma parameter
    (1) empty -> .
    (15) parameter -> . type Identifier
    (9) type -> . Int

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Int             shift and go to state 6

    type                           shift and go to state 13
    parameterlist                  shift and go to state 14
    empty                          shift and go to state 15
    parameter                      shift and go to state 16

state 9

    (5) globaldeclaration -> type Identifier Semi .

    Int             reduce using rule 5 (globaldeclaration -> type Identifier Semi .)
    $end            reduce using rule 5 (globaldeclaration -> type Identifier Semi .)


state 10

    (6) globaldeclaration -> type Identifier Assign . expression Semi
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 18
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 11

    (7) globaldeclaration -> type Identifier indexlist . Semi
    (8) globaldeclaration -> type Identifier indexlist . Assign expression Semi
    (67) indexlist -> indexlist . LMidBrace Integer RMidBrace

    Semi            shift and go to state 39
    Assign          shift and go to state 40
    LMidBrace       shift and go to state 41


state 12

    (68) indexlist -> empty .

    Semi            reduce using rule 68 (indexlist -> empty .)
    Assign          reduce using rule 68 (indexlist -> empty .)
    LMidBrace       reduce using rule 68 (indexlist -> empty .)


state 13

    (15) parameter -> type . Identifier

    Identifier      shift and go to state 42


state 14

    (10) function -> type Identifier LParen parameterlist . RParen Semi
    (11) function -> type Identifier LParen parameterlist . RParen LBrace block RBrace
    (14) parameterlist -> parameterlist . Comma parameter

    RParen          shift and go to state 43
    Comma           shift and go to state 44


state 15

    (12) parameterlist -> empty .

    RParen          reduce using rule 12 (parameterlist -> empty .)
    Comma           reduce using rule 12 (parameterlist -> empty .)


state 16

    (13) parameterlist -> parameter .

    RParen          reduce using rule 13 (parameterlist -> parameter .)
    Comma           reduce using rule 13 (parameterlist -> parameter .)


state 17

    (83) postfix -> Identifier . LParen expressionlist RParen
    (109) primary -> Identifier .

    LParen          shift and go to state 45
    Assign          reduce using rule 109 (primary -> Identifier .)
    Mul             reduce using rule 109 (primary -> Identifier .)
    Div             reduce using rule 109 (primary -> Identifier .)
    Mod             reduce using rule 109 (primary -> Identifier .)
    Plus            reduce using rule 109 (primary -> Identifier .)
    Minus           reduce using rule 109 (primary -> Identifier .)
    Less            reduce using rule 109 (primary -> Identifier .)
    Greater         reduce using rule 109 (primary -> Identifier .)
    LessEqual       reduce using rule 109 (primary -> Identifier .)
    GreaterEqual    reduce using rule 109 (primary -> Identifier .)
    NotEqual        reduce using rule 109 (primary -> Identifier .)
    Equal           reduce using rule 109 (primary -> Identifier .)
    BitAnd          reduce using rule 109 (primary -> Identifier .)
    Xor             reduce using rule 109 (primary -> Identifier .)
    BitOr           reduce using rule 109 (primary -> Identifier .)
    And             reduce using rule 109 (primary -> Identifier .)
    Question        reduce using rule 109 (primary -> Identifier .)
    Or              reduce using rule 109 (primary -> Identifier .)
    Semi            reduce using rule 109 (primary -> Identifier .)
    LMidBrace       reduce using rule 109 (primary -> Identifier .)
    RParen          reduce using rule 109 (primary -> Identifier .)
    Comma           reduce using rule 109 (primary -> Identifier .)
    Colon           reduce using rule 109 (primary -> Identifier .)
    RMidBrace       reduce using rule 109 (primary -> Identifier .)


state 18

    (6) globaldeclaration -> type Identifier Assign expression . Semi

    Semi            shift and go to state 46


state 19

    (69) expression -> assignment .

    Semi            reduce using rule 69 (expression -> assignment .)
    RParen          reduce using rule 69 (expression -> assignment .)
    Comma           reduce using rule 69 (expression -> assignment .)
    Colon           reduce using rule 69 (expression -> assignment .)
    RMidBrace       reduce using rule 69 (expression -> assignment .)


state 20

    (70) assignment -> conditional .

    Semi            reduce using rule 70 (assignment -> conditional .)
    RParen          reduce using rule 70 (assignment -> conditional .)
    Comma           reduce using rule 70 (assignment -> conditional .)
    Colon           reduce using rule 70 (assignment -> conditional .)
    RMidBrace       reduce using rule 70 (assignment -> conditional .)


state 21

    (90) assignment -> postfix . Assign expression
    (81) unary -> postfix .

    Assign          shift and go to state 47
    Mul             reduce using rule 81 (unary -> postfix .)
    Div             reduce using rule 81 (unary -> postfix .)
    Mod             reduce using rule 81 (unary -> postfix .)
    Plus            reduce using rule 81 (unary -> postfix .)
    Minus           reduce using rule 81 (unary -> postfix .)
    Less            reduce using rule 81 (unary -> postfix .)
    Greater         reduce using rule 81 (unary -> postfix .)
    LessEqual       reduce using rule 81 (unary -> postfix .)
    GreaterEqual    reduce using rule 81 (unary -> postfix .)
    NotEqual        reduce using rule 81 (unary -> postfix .)
    Equal           reduce using rule 81 (unary -> postfix .)
    BitAnd          reduce using rule 81 (unary -> postfix .)
    Xor             reduce using rule 81 (unary -> postfix .)
    BitOr           reduce using rule 81 (unary -> postfix .)
    And             reduce using rule 81 (unary -> postfix .)
    Question        reduce using rule 81 (unary -> postfix .)
    Or              reduce using rule 81 (unary -> postfix .)
    Semi            reduce using rule 81 (unary -> postfix .)
    RParen          reduce using rule 81 (unary -> postfix .)
    Comma           reduce using rule 81 (unary -> postfix .)
    Colon           reduce using rule 81 (unary -> postfix .)
    RMidBrace       reduce using rule 81 (unary -> postfix .)


state 22

    (71) conditional -> logical_or .
    (107) conditional -> logical_or . Question expression Colon conditional
    (91) logical_or -> logical_or . Or logical_and

    Semi            reduce using rule 71 (conditional -> logical_or .)
    RParen          reduce using rule 71 (conditional -> logical_or .)
    Comma           reduce using rule 71 (conditional -> logical_or .)
    Colon           reduce using rule 71 (conditional -> logical_or .)
    RMidBrace       reduce using rule 71 (conditional -> logical_or .)
    Question        shift and go to state 48
    Or              shift and go to state 49


state 23

    (82) postfix -> primary .
    (86) postfix_array -> primary .

    Assign          reduce using rule 82 (postfix -> primary .)
    Mul             reduce using rule 82 (postfix -> primary .)
    Div             reduce using rule 82 (postfix -> primary .)
    Mod             reduce using rule 82 (postfix -> primary .)
    Plus            reduce using rule 82 (postfix -> primary .)
    Minus           reduce using rule 82 (postfix -> primary .)
    Less            reduce using rule 82 (postfix -> primary .)
    Greater         reduce using rule 82 (postfix -> primary .)
    LessEqual       reduce using rule 82 (postfix -> primary .)
    GreaterEqual    reduce using rule 82 (postfix -> primary .)
    NotEqual        reduce using rule 82 (postfix -> primary .)
    Equal           reduce using rule 82 (postfix -> primary .)
    BitAnd          reduce using rule 82 (postfix -> primary .)
    Xor             reduce using rule 82 (postfix -> primary .)
    BitOr           reduce using rule 82 (postfix -> primary .)
    And             reduce using rule 82 (postfix -> primary .)
    Question        reduce using rule 82 (postfix -> primary .)
    Or              reduce using rule 82 (postfix -> primary .)
    Semi            reduce using rule 82 (postfix -> primary .)
    RParen          reduce using rule 82 (postfix -> primary .)
    Comma           reduce using rule 82 (postfix -> primary .)
    Colon           reduce using rule 82 (postfix -> primary .)
    RMidBrace       reduce using rule 82 (postfix -> primary .)
    LMidBrace       reduce using rule 86 (postfix_array -> primary .)


state 24

    (110) primary -> LParen . expression RParen
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 50
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 25

    (84) postfix -> postfix_array . LMidBrace expression RMidBrace
    (85) postfix_array -> postfix_array . LMidBrace expression RMidBrace

    LMidBrace       shift and go to state 51


state 26

    (72) logical_or -> logical_and .
    (92) logical_and -> logical_and . And bit_or

    Question        reduce using rule 72 (logical_or -> logical_and .)
    Or              reduce using rule 72 (logical_or -> logical_and .)
    Semi            reduce using rule 72 (logical_or -> logical_and .)
    RParen          reduce using rule 72 (logical_or -> logical_and .)
    Comma           reduce using rule 72 (logical_or -> logical_and .)
    Colon           reduce using rule 72 (logical_or -> logical_and .)
    RMidBrace       reduce using rule 72 (logical_or -> logical_and .)
    And             shift and go to state 52


state 27

    (108) primary -> Integer .

    Assign          reduce using rule 108 (primary -> Integer .)
    Mul             reduce using rule 108 (primary -> Integer .)
    Div             reduce using rule 108 (primary -> Integer .)
    Mod             reduce using rule 108 (primary -> Integer .)
    Plus            reduce using rule 108 (primary -> Integer .)
    Minus           reduce using rule 108 (primary -> Integer .)
    Less            reduce using rule 108 (primary -> Integer .)
    Greater         reduce using rule 108 (primary -> Integer .)
    LessEqual       reduce using rule 108 (primary -> Integer .)
    GreaterEqual    reduce using rule 108 (primary -> Integer .)
    NotEqual        reduce using rule 108 (primary -> Integer .)
    Equal           reduce using rule 108 (primary -> Integer .)
    BitAnd          reduce using rule 108 (primary -> Integer .)
    Xor             reduce using rule 108 (primary -> Integer .)
    BitOr           reduce using rule 108 (primary -> Integer .)
    And             reduce using rule 108 (primary -> Integer .)
    Question        reduce using rule 108 (primary -> Integer .)
    Or              reduce using rule 108 (primary -> Integer .)
    Semi            reduce using rule 108 (primary -> Integer .)
    LMidBrace       reduce using rule 108 (primary -> Integer .)
    RParen          reduce using rule 108 (primary -> Integer .)
    Comma           reduce using rule 108 (primary -> Integer .)
    Colon           reduce using rule 108 (primary -> Integer .)
    RMidBrace       reduce using rule 108 (primary -> Integer .)


state 28

    (73) logical_and -> bit_or .
    (93) bit_or -> bit_or . BitOr xor

    And             reduce using rule 73 (logical_and -> bit_or .)
    Question        reduce using rule 73 (logical_and -> bit_or .)
    Or              reduce using rule 73 (logical_and -> bit_or .)
    Semi            reduce using rule 73 (logical_and -> bit_or .)
    RParen          reduce using rule 73 (logical_and -> bit_or .)
    Comma           reduce using rule 73 (logical_and -> bit_or .)
    Colon           reduce using rule 73 (logical_and -> bit_or .)
    RMidBrace       reduce using rule 73 (logical_and -> bit_or .)
    BitOr           shift and go to state 53


state 29

    (74) bit_or -> xor .
    (94) xor -> xor . Xor bit_and

    BitOr           reduce using rule 74 (bit_or -> xor .)
    And             reduce using rule 74 (bit_or -> xor .)
    Question        reduce using rule 74 (bit_or -> xor .)
    Or              reduce using rule 74 (bit_or -> xor .)
    Semi            reduce using rule 74 (bit_or -> xor .)
    RParen          reduce using rule 74 (bit_or -> xor .)
    Comma           reduce using rule 74 (bit_or -> xor .)
    Colon           reduce using rule 74 (bit_or -> xor .)
    RMidBrace       reduce using rule 74 (bit_or -> xor .)
    Xor             shift and go to state 54


state 30

    (75) xor -> bit_and .
    (95) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 75 (xor -> bit_and .)
    BitOr           reduce using rule 75 (xor -> bit_and .)
    And             reduce using rule 75 (xor -> bit_and .)
    Question        reduce using rule 75 (xor -> bit_and .)
    Or              reduce using rule 75 (xor -> bit_and .)
    Semi            reduce using rule 75 (xor -> bit_and .)
    RParen          reduce using rule 75 (xor -> bit_and .)
    Comma           reduce using rule 75 (xor -> bit_and .)
    Colon           reduce using rule 75 (xor -> bit_and .)
    RMidBrace       reduce using rule 75 (xor -> bit_and .)
    BitAnd          shift and go to state 55


state 31

    (76) bit_and -> equality .
    (96) equality -> equality . NotEqual relational
    (97) equality -> equality . Equal relational

    BitAnd          reduce using rule 76 (bit_and -> equality .)
    Xor             reduce using rule 76 (bit_and -> equality .)
    BitOr           reduce using rule 76 (bit_and -> equality .)
    And             reduce using rule 76 (bit_and -> equality .)
    Question        reduce using rule 76 (bit_and -> equality .)
    Or              reduce using rule 76 (bit_and -> equality .)
    Semi            reduce using rule 76 (bit_and -> equality .)
    RParen          reduce using rule 76 (bit_and -> equality .)
    Comma           reduce using rule 76 (bit_and -> equality .)
    Colon           reduce using rule 76 (bit_and -> equality .)
    RMidBrace       reduce using rule 76 (bit_and -> equality .)
    NotEqual        shift and go to state 56
    Equal           shift and go to state 57


state 32

    (77) equality -> relational .
    (98) relational -> relational . Less additive
    (99) relational -> relational . Greater additive
    (100) relational -> relational . LessEqual additive
    (101) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 77 (equality -> relational .)
    Equal           reduce using rule 77 (equality -> relational .)
    BitAnd          reduce using rule 77 (equality -> relational .)
    Xor             reduce using rule 77 (equality -> relational .)
    BitOr           reduce using rule 77 (equality -> relational .)
    And             reduce using rule 77 (equality -> relational .)
    Question        reduce using rule 77 (equality -> relational .)
    Or              reduce using rule 77 (equality -> relational .)
    Semi            reduce using rule 77 (equality -> relational .)
    RParen          reduce using rule 77 (equality -> relational .)
    Comma           reduce using rule 77 (equality -> relational .)
    Colon           reduce using rule 77 (equality -> relational .)
    RMidBrace       reduce using rule 77 (equality -> relational .)
    Less            shift and go to state 58
    Greater         shift and go to state 59
    LessEqual       shift and go to state 60
    GreaterEqual    shift and go to state 61


state 33

    (78) relational -> additive .
    (102) additive -> additive . Plus multiplicative
    (103) additive -> additive . Minus multiplicative

    Less            reduce using rule 78 (relational -> additive .)
    Greater         reduce using rule 78 (relational -> additive .)
    LessEqual       reduce using rule 78 (relational -> additive .)
    GreaterEqual    reduce using rule 78 (relational -> additive .)
    NotEqual        reduce using rule 78 (relational -> additive .)
    Equal           reduce using rule 78 (relational -> additive .)
    BitAnd          reduce using rule 78 (relational -> additive .)
    Xor             reduce using rule 78 (relational -> additive .)
    BitOr           reduce using rule 78 (relational -> additive .)
    And             reduce using rule 78 (relational -> additive .)
    Question        reduce using rule 78 (relational -> additive .)
    Or              reduce using rule 78 (relational -> additive .)
    Semi            reduce using rule 78 (relational -> additive .)
    RParen          reduce using rule 78 (relational -> additive .)
    Comma           reduce using rule 78 (relational -> additive .)
    Colon           reduce using rule 78 (relational -> additive .)
    RMidBrace       reduce using rule 78 (relational -> additive .)
    Plus            shift and go to state 62
    Minus           shift and go to state 63


state 34

    (79) additive -> multiplicative .
    (104) multiplicative -> multiplicative . Mul unary
    (105) multiplicative -> multiplicative . Div unary
    (106) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 79 (additive -> multiplicative .)
    Minus           reduce using rule 79 (additive -> multiplicative .)
    Less            reduce using rule 79 (additive -> multiplicative .)
    Greater         reduce using rule 79 (additive -> multiplicative .)
    LessEqual       reduce using rule 79 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 79 (additive -> multiplicative .)
    NotEqual        reduce using rule 79 (additive -> multiplicative .)
    Equal           reduce using rule 79 (additive -> multiplicative .)
    BitAnd          reduce using rule 79 (additive -> multiplicative .)
    Xor             reduce using rule 79 (additive -> multiplicative .)
    BitOr           reduce using rule 79 (additive -> multiplicative .)
    And             reduce using rule 79 (additive -> multiplicative .)
    Question        reduce using rule 79 (additive -> multiplicative .)
    Or              reduce using rule 79 (additive -> multiplicative .)
    Semi            reduce using rule 79 (additive -> multiplicative .)
    RParen          reduce using rule 79 (additive -> multiplicative .)
    Comma           reduce using rule 79 (additive -> multiplicative .)
    Colon           reduce using rule 79 (additive -> multiplicative .)
    RMidBrace       reduce using rule 79 (additive -> multiplicative .)
    Mul             shift and go to state 64
    Div             shift and go to state 65
    Mod             shift and go to state 66


state 35

    (87) unary -> Minus . unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    unary                          shift and go to state 67
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 36

    (80) multiplicative -> unary .

    Mul             reduce using rule 80 (multiplicative -> unary .)
    Div             reduce using rule 80 (multiplicative -> unary .)
    Mod             reduce using rule 80 (multiplicative -> unary .)
    Plus            reduce using rule 80 (multiplicative -> unary .)
    Minus           reduce using rule 80 (multiplicative -> unary .)
    Less            reduce using rule 80 (multiplicative -> unary .)
    Greater         reduce using rule 80 (multiplicative -> unary .)
    LessEqual       reduce using rule 80 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 80 (multiplicative -> unary .)
    NotEqual        reduce using rule 80 (multiplicative -> unary .)
    Equal           reduce using rule 80 (multiplicative -> unary .)
    BitAnd          reduce using rule 80 (multiplicative -> unary .)
    Xor             reduce using rule 80 (multiplicative -> unary .)
    BitOr           reduce using rule 80 (multiplicative -> unary .)
    And             reduce using rule 80 (multiplicative -> unary .)
    Question        reduce using rule 80 (multiplicative -> unary .)
    Or              reduce using rule 80 (multiplicative -> unary .)
    Semi            reduce using rule 80 (multiplicative -> unary .)
    RParen          reduce using rule 80 (multiplicative -> unary .)
    Comma           reduce using rule 80 (multiplicative -> unary .)
    Colon           reduce using rule 80 (multiplicative -> unary .)
    RMidBrace       reduce using rule 80 (multiplicative -> unary .)


state 37

    (88) unary -> BitNot . unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    unary                          shift and go to state 69
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 38

    (89) unary -> Not . unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    unary                          shift and go to state 70
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 39

    (7) globaldeclaration -> type Identifier indexlist Semi .

    Int             reduce using rule 7 (globaldeclaration -> type Identifier indexlist Semi .)
    $end            reduce using rule 7 (globaldeclaration -> type Identifier indexlist Semi .)


state 40

    (8) globaldeclaration -> type Identifier indexlist Assign . expression Semi
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 71
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 41

    (67) indexlist -> indexlist LMidBrace . Integer RMidBrace

    Integer         shift and go to state 72


state 42

    (15) parameter -> type Identifier .

    RParen          reduce using rule 15 (parameter -> type Identifier .)
    Comma           reduce using rule 15 (parameter -> type Identifier .)


state 43

    (10) function -> type Identifier LParen parameterlist RParen . Semi
    (11) function -> type Identifier LParen parameterlist RParen . LBrace block RBrace

    Semi            shift and go to state 73
    LBrace          shift and go to state 74


state 44

    (14) parameterlist -> parameterlist Comma . parameter
    (15) parameter -> . type Identifier
    (9) type -> . Int

    Int             shift and go to state 6

    parameter                      shift and go to state 75
    type                           shift and go to state 13

state 45

    (83) postfix -> Identifier LParen . expressionlist RParen
    (16) expressionlist -> . empty
    (17) expressionlist -> . expression
    (18) expressionlist -> . expressionlist Comma expression
    (1) empty -> .
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expressionlist                 shift and go to state 76
    empty                          shift and go to state 77
    expression                     shift and go to state 78
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 46

    (6) globaldeclaration -> type Identifier Assign expression Semi .

    Int             reduce using rule 6 (globaldeclaration -> type Identifier Assign expression Semi .)
    $end            reduce using rule 6 (globaldeclaration -> type Identifier Assign expression Semi .)


state 47

    (90) assignment -> postfix Assign . expression
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    postfix                        shift and go to state 21
    expression                     shift and go to state 79
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 48

    (107) conditional -> logical_or Question . expression Colon conditional
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    logical_or                     shift and go to state 22
    expression                     shift and go to state 80
    conditional                    shift and go to state 20
    assignment                     shift and go to state 19
    postfix                        shift and go to state 21
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 49

    (91) logical_or -> logical_or Or . logical_and
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    logical_and                    shift and go to state 81
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 50

    (110) primary -> LParen expression . RParen

    RParen          shift and go to state 82


state 51

    (84) postfix -> postfix_array LMidBrace . expression RMidBrace
    (85) postfix_array -> postfix_array LMidBrace . expression RMidBrace
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    postfix_array                  shift and go to state 25
    expression                     shift and go to state 83
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 52

    (92) logical_and -> logical_and And . bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    bit_or                         shift and go to state 84
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 53

    (93) bit_or -> bit_or BitOr . xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    xor                            shift and go to state 85
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 54

    (94) xor -> xor Xor . bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    bit_and                        shift and go to state 86
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 55

    (95) bit_and -> bit_and BitAnd . equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    equality                       shift and go to state 87
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 56

    (96) equality -> equality NotEqual . relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    relational                     shift and go to state 88
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 57

    (97) equality -> equality Equal . relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    relational                     shift and go to state 89
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 58

    (98) relational -> relational Less . additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    additive                       shift and go to state 90
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 59

    (99) relational -> relational Greater . additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    additive                       shift and go to state 91
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 60

    (100) relational -> relational LessEqual . additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    additive                       shift and go to state 92
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 61

    (101) relational -> relational GreaterEqual . additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    additive                       shift and go to state 93
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 62

    (102) additive -> additive Plus . multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    multiplicative                 shift and go to state 94
    unary                          shift and go to state 36
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 63

    (103) additive -> additive Minus . multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    multiplicative                 shift and go to state 95
    unary                          shift and go to state 36
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 64

    (104) multiplicative -> multiplicative Mul . unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    unary                          shift and go to state 96
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 65

    (105) multiplicative -> multiplicative Div . unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    unary                          shift and go to state 97
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 66

    (106) multiplicative -> multiplicative Mod . unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    unary                          shift and go to state 98
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 67

    (87) unary -> Minus unary .

    Mul             reduce using rule 87 (unary -> Minus unary .)
    Div             reduce using rule 87 (unary -> Minus unary .)
    Mod             reduce using rule 87 (unary -> Minus unary .)
    Plus            reduce using rule 87 (unary -> Minus unary .)
    Minus           reduce using rule 87 (unary -> Minus unary .)
    Less            reduce using rule 87 (unary -> Minus unary .)
    Greater         reduce using rule 87 (unary -> Minus unary .)
    LessEqual       reduce using rule 87 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 87 (unary -> Minus unary .)
    NotEqual        reduce using rule 87 (unary -> Minus unary .)
    Equal           reduce using rule 87 (unary -> Minus unary .)
    BitAnd          reduce using rule 87 (unary -> Minus unary .)
    Xor             reduce using rule 87 (unary -> Minus unary .)
    BitOr           reduce using rule 87 (unary -> Minus unary .)
    And             reduce using rule 87 (unary -> Minus unary .)
    Question        reduce using rule 87 (unary -> Minus unary .)
    Or              reduce using rule 87 (unary -> Minus unary .)
    Semi            reduce using rule 87 (unary -> Minus unary .)
    RParen          reduce using rule 87 (unary -> Minus unary .)
    Comma           reduce using rule 87 (unary -> Minus unary .)
    Colon           reduce using rule 87 (unary -> Minus unary .)
    RMidBrace       reduce using rule 87 (unary -> Minus unary .)


state 68

    (81) unary -> postfix .

    Mul             reduce using rule 81 (unary -> postfix .)
    Div             reduce using rule 81 (unary -> postfix .)
    Mod             reduce using rule 81 (unary -> postfix .)
    Plus            reduce using rule 81 (unary -> postfix .)
    Minus           reduce using rule 81 (unary -> postfix .)
    Less            reduce using rule 81 (unary -> postfix .)
    Greater         reduce using rule 81 (unary -> postfix .)
    LessEqual       reduce using rule 81 (unary -> postfix .)
    GreaterEqual    reduce using rule 81 (unary -> postfix .)
    NotEqual        reduce using rule 81 (unary -> postfix .)
    Equal           reduce using rule 81 (unary -> postfix .)
    BitAnd          reduce using rule 81 (unary -> postfix .)
    Xor             reduce using rule 81 (unary -> postfix .)
    BitOr           reduce using rule 81 (unary -> postfix .)
    And             reduce using rule 81 (unary -> postfix .)
    Question        reduce using rule 81 (unary -> postfix .)
    Or              reduce using rule 81 (unary -> postfix .)
    Semi            reduce using rule 81 (unary -> postfix .)
    RParen          reduce using rule 81 (unary -> postfix .)
    Comma           reduce using rule 81 (unary -> postfix .)
    Colon           reduce using rule 81 (unary -> postfix .)
    RMidBrace       reduce using rule 81 (unary -> postfix .)


state 69

    (88) unary -> BitNot unary .

    Mul             reduce using rule 88 (unary -> BitNot unary .)
    Div             reduce using rule 88 (unary -> BitNot unary .)
    Mod             reduce using rule 88 (unary -> BitNot unary .)
    Plus            reduce using rule 88 (unary -> BitNot unary .)
    Minus           reduce using rule 88 (unary -> BitNot unary .)
    Less            reduce using rule 88 (unary -> BitNot unary .)
    Greater         reduce using rule 88 (unary -> BitNot unary .)
    LessEqual       reduce using rule 88 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 88 (unary -> BitNot unary .)
    NotEqual        reduce using rule 88 (unary -> BitNot unary .)
    Equal           reduce using rule 88 (unary -> BitNot unary .)
    BitAnd          reduce using rule 88 (unary -> BitNot unary .)
    Xor             reduce using rule 88 (unary -> BitNot unary .)
    BitOr           reduce using rule 88 (unary -> BitNot unary .)
    And             reduce using rule 88 (unary -> BitNot unary .)
    Question        reduce using rule 88 (unary -> BitNot unary .)
    Or              reduce using rule 88 (unary -> BitNot unary .)
    Semi            reduce using rule 88 (unary -> BitNot unary .)
    RParen          reduce using rule 88 (unary -> BitNot unary .)
    Comma           reduce using rule 88 (unary -> BitNot unary .)
    Colon           reduce using rule 88 (unary -> BitNot unary .)
    RMidBrace       reduce using rule 88 (unary -> BitNot unary .)


state 70

    (89) unary -> Not unary .

    Mul             reduce using rule 89 (unary -> Not unary .)
    Div             reduce using rule 89 (unary -> Not unary .)
    Mod             reduce using rule 89 (unary -> Not unary .)
    Plus            reduce using rule 89 (unary -> Not unary .)
    Minus           reduce using rule 89 (unary -> Not unary .)
    Less            reduce using rule 89 (unary -> Not unary .)
    Greater         reduce using rule 89 (unary -> Not unary .)
    LessEqual       reduce using rule 89 (unary -> Not unary .)
    GreaterEqual    reduce using rule 89 (unary -> Not unary .)
    NotEqual        reduce using rule 89 (unary -> Not unary .)
    Equal           reduce using rule 89 (unary -> Not unary .)
    BitAnd          reduce using rule 89 (unary -> Not unary .)
    Xor             reduce using rule 89 (unary -> Not unary .)
    BitOr           reduce using rule 89 (unary -> Not unary .)
    And             reduce using rule 89 (unary -> Not unary .)
    Question        reduce using rule 89 (unary -> Not unary .)
    Or              reduce using rule 89 (unary -> Not unary .)
    Semi            reduce using rule 89 (unary -> Not unary .)
    RParen          reduce using rule 89 (unary -> Not unary .)
    Comma           reduce using rule 89 (unary -> Not unary .)
    Colon           reduce using rule 89 (unary -> Not unary .)
    RMidBrace       reduce using rule 89 (unary -> Not unary .)


state 71

    (8) globaldeclaration -> type Identifier indexlist Assign expression . Semi

    Semi            shift and go to state 99


state 72

    (67) indexlist -> indexlist LMidBrace Integer . RMidBrace

    RMidBrace       shift and go to state 100


state 73

    (10) function -> type Identifier LParen parameterlist RParen Semi .

    Int             reduce using rule 10 (function -> type Identifier LParen parameterlist RParen Semi .)
    $end            reduce using rule 10 (function -> type Identifier LParen parameterlist RParen Semi .)


state 74

    (11) function -> type Identifier LParen parameterlist RParen LBrace . block RBrace
    (19) block -> . block block_item
    (20) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 101
    empty                          shift and go to state 102

state 75

    (14) parameterlist -> parameterlist Comma parameter .

    RParen          reduce using rule 14 (parameterlist -> parameterlist Comma parameter .)
    Comma           reduce using rule 14 (parameterlist -> parameterlist Comma parameter .)


state 76

    (83) postfix -> Identifier LParen expressionlist . RParen
    (18) expressionlist -> expressionlist . Comma expression

    RParen          shift and go to state 103
    Comma           shift and go to state 104


state 77

    (16) expressionlist -> empty .

    RParen          reduce using rule 16 (expressionlist -> empty .)
    Comma           reduce using rule 16 (expressionlist -> empty .)


state 78

    (17) expressionlist -> expression .

    RParen          reduce using rule 17 (expressionlist -> expression .)
    Comma           reduce using rule 17 (expressionlist -> expression .)


state 79

    (90) assignment -> postfix Assign expression .

    Semi            reduce using rule 90 (assignment -> postfix Assign expression .)
    RParen          reduce using rule 90 (assignment -> postfix Assign expression .)
    Comma           reduce using rule 90 (assignment -> postfix Assign expression .)
    Colon           reduce using rule 90 (assignment -> postfix Assign expression .)
    RMidBrace       reduce using rule 90 (assignment -> postfix Assign expression .)


state 80

    (107) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 105


state 81

    (91) logical_or -> logical_or Or logical_and .
    (92) logical_and -> logical_and . And bit_or

    Question        reduce using rule 91 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 91 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 91 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 91 (logical_or -> logical_or Or logical_and .)
    Comma           reduce using rule 91 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 91 (logical_or -> logical_or Or logical_and .)
    RMidBrace       reduce using rule 91 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 52


state 82

    (110) primary -> LParen expression RParen .

    Assign          reduce using rule 110 (primary -> LParen expression RParen .)
    Mul             reduce using rule 110 (primary -> LParen expression RParen .)
    Div             reduce using rule 110 (primary -> LParen expression RParen .)
    Mod             reduce using rule 110 (primary -> LParen expression RParen .)
    Plus            reduce using rule 110 (primary -> LParen expression RParen .)
    Minus           reduce using rule 110 (primary -> LParen expression RParen .)
    Less            reduce using rule 110 (primary -> LParen expression RParen .)
    Greater         reduce using rule 110 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 110 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 110 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 110 (primary -> LParen expression RParen .)
    Equal           reduce using rule 110 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 110 (primary -> LParen expression RParen .)
    Xor             reduce using rule 110 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 110 (primary -> LParen expression RParen .)
    And             reduce using rule 110 (primary -> LParen expression RParen .)
    Question        reduce using rule 110 (primary -> LParen expression RParen .)
    Or              reduce using rule 110 (primary -> LParen expression RParen .)
    Semi            reduce using rule 110 (primary -> LParen expression RParen .)
    LMidBrace       reduce using rule 110 (primary -> LParen expression RParen .)
    RParen          reduce using rule 110 (primary -> LParen expression RParen .)
    Comma           reduce using rule 110 (primary -> LParen expression RParen .)
    Colon           reduce using rule 110 (primary -> LParen expression RParen .)
    RMidBrace       reduce using rule 110 (primary -> LParen expression RParen .)


state 83

    (84) postfix -> postfix_array LMidBrace expression . RMidBrace
    (85) postfix_array -> postfix_array LMidBrace expression . RMidBrace

    RMidBrace       shift and go to state 106


state 84

    (92) logical_and -> logical_and And bit_or .
    (93) bit_or -> bit_or . BitOr xor

    And             reduce using rule 92 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 92 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 92 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 92 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 92 (logical_and -> logical_and And bit_or .)
    Comma           reduce using rule 92 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 92 (logical_and -> logical_and And bit_or .)
    RMidBrace       reduce using rule 92 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 53


state 85

    (93) bit_or -> bit_or BitOr xor .
    (94) xor -> xor . Xor bit_and

    BitOr           reduce using rule 93 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 93 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 93 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 93 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 93 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 93 (bit_or -> bit_or BitOr xor .)
    Comma           reduce using rule 93 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 93 (bit_or -> bit_or BitOr xor .)
    RMidBrace       reduce using rule 93 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 54


state 86

    (94) xor -> xor Xor bit_and .
    (95) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 94 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 94 (xor -> xor Xor bit_and .)
    And             reduce using rule 94 (xor -> xor Xor bit_and .)
    Question        reduce using rule 94 (xor -> xor Xor bit_and .)
    Or              reduce using rule 94 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 94 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 94 (xor -> xor Xor bit_and .)
    Comma           reduce using rule 94 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 94 (xor -> xor Xor bit_and .)
    RMidBrace       reduce using rule 94 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 55


state 87

    (95) bit_and -> bit_and BitAnd equality .
    (96) equality -> equality . NotEqual relational
    (97) equality -> equality . Equal relational

    BitAnd          reduce using rule 95 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 95 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 95 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 95 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 95 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 95 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 95 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 95 (bit_and -> bit_and BitAnd equality .)
    Comma           reduce using rule 95 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 95 (bit_and -> bit_and BitAnd equality .)
    RMidBrace       reduce using rule 95 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 56
    Equal           shift and go to state 57


state 88

    (96) equality -> equality NotEqual relational .
    (98) relational -> relational . Less additive
    (99) relational -> relational . Greater additive
    (100) relational -> relational . LessEqual additive
    (101) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 96 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 96 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 96 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 96 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 96 (equality -> equality NotEqual relational .)
    And             reduce using rule 96 (equality -> equality NotEqual relational .)
    Question        reduce using rule 96 (equality -> equality NotEqual relational .)
    Or              reduce using rule 96 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 96 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 96 (equality -> equality NotEqual relational .)
    Comma           reduce using rule 96 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 96 (equality -> equality NotEqual relational .)
    RMidBrace       reduce using rule 96 (equality -> equality NotEqual relational .)
    Less            shift and go to state 58
    Greater         shift and go to state 59
    LessEqual       shift and go to state 60
    GreaterEqual    shift and go to state 61


state 89

    (97) equality -> equality Equal relational .
    (98) relational -> relational . Less additive
    (99) relational -> relational . Greater additive
    (100) relational -> relational . LessEqual additive
    (101) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 97 (equality -> equality Equal relational .)
    Equal           reduce using rule 97 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 97 (equality -> equality Equal relational .)
    Xor             reduce using rule 97 (equality -> equality Equal relational .)
    BitOr           reduce using rule 97 (equality -> equality Equal relational .)
    And             reduce using rule 97 (equality -> equality Equal relational .)
    Question        reduce using rule 97 (equality -> equality Equal relational .)
    Or              reduce using rule 97 (equality -> equality Equal relational .)
    Semi            reduce using rule 97 (equality -> equality Equal relational .)
    RParen          reduce using rule 97 (equality -> equality Equal relational .)
    Comma           reduce using rule 97 (equality -> equality Equal relational .)
    Colon           reduce using rule 97 (equality -> equality Equal relational .)
    RMidBrace       reduce using rule 97 (equality -> equality Equal relational .)
    Less            shift and go to state 58
    Greater         shift and go to state 59
    LessEqual       shift and go to state 60
    GreaterEqual    shift and go to state 61


state 90

    (98) relational -> relational Less additive .
    (102) additive -> additive . Plus multiplicative
    (103) additive -> additive . Minus multiplicative

    Less            reduce using rule 98 (relational -> relational Less additive .)
    Greater         reduce using rule 98 (relational -> relational Less additive .)
    LessEqual       reduce using rule 98 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 98 (relational -> relational Less additive .)
    NotEqual        reduce using rule 98 (relational -> relational Less additive .)
    Equal           reduce using rule 98 (relational -> relational Less additive .)
    BitAnd          reduce using rule 98 (relational -> relational Less additive .)
    Xor             reduce using rule 98 (relational -> relational Less additive .)
    BitOr           reduce using rule 98 (relational -> relational Less additive .)
    And             reduce using rule 98 (relational -> relational Less additive .)
    Question        reduce using rule 98 (relational -> relational Less additive .)
    Or              reduce using rule 98 (relational -> relational Less additive .)
    Semi            reduce using rule 98 (relational -> relational Less additive .)
    RParen          reduce using rule 98 (relational -> relational Less additive .)
    Comma           reduce using rule 98 (relational -> relational Less additive .)
    Colon           reduce using rule 98 (relational -> relational Less additive .)
    RMidBrace       reduce using rule 98 (relational -> relational Less additive .)
    Plus            shift and go to state 62
    Minus           shift and go to state 63


state 91

    (99) relational -> relational Greater additive .
    (102) additive -> additive . Plus multiplicative
    (103) additive -> additive . Minus multiplicative

    Less            reduce using rule 99 (relational -> relational Greater additive .)
    Greater         reduce using rule 99 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 99 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 99 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 99 (relational -> relational Greater additive .)
    Equal           reduce using rule 99 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 99 (relational -> relational Greater additive .)
    Xor             reduce using rule 99 (relational -> relational Greater additive .)
    BitOr           reduce using rule 99 (relational -> relational Greater additive .)
    And             reduce using rule 99 (relational -> relational Greater additive .)
    Question        reduce using rule 99 (relational -> relational Greater additive .)
    Or              reduce using rule 99 (relational -> relational Greater additive .)
    Semi            reduce using rule 99 (relational -> relational Greater additive .)
    RParen          reduce using rule 99 (relational -> relational Greater additive .)
    Comma           reduce using rule 99 (relational -> relational Greater additive .)
    Colon           reduce using rule 99 (relational -> relational Greater additive .)
    RMidBrace       reduce using rule 99 (relational -> relational Greater additive .)
    Plus            shift and go to state 62
    Minus           shift and go to state 63


state 92

    (100) relational -> relational LessEqual additive .
    (102) additive -> additive . Plus multiplicative
    (103) additive -> additive . Minus multiplicative

    Less            reduce using rule 100 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 100 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 100 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 100 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 100 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 100 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 100 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 100 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 100 (relational -> relational LessEqual additive .)
    And             reduce using rule 100 (relational -> relational LessEqual additive .)
    Question        reduce using rule 100 (relational -> relational LessEqual additive .)
    Or              reduce using rule 100 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 100 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 100 (relational -> relational LessEqual additive .)
    Comma           reduce using rule 100 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 100 (relational -> relational LessEqual additive .)
    RMidBrace       reduce using rule 100 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 62
    Minus           shift and go to state 63


state 93

    (101) relational -> relational GreaterEqual additive .
    (102) additive -> additive . Plus multiplicative
    (103) additive -> additive . Minus multiplicative

    Less            reduce using rule 101 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 101 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 101 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 101 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 101 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 101 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 101 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 101 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 101 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 101 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 101 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 101 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 101 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 101 (relational -> relational GreaterEqual additive .)
    Comma           reduce using rule 101 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 101 (relational -> relational GreaterEqual additive .)
    RMidBrace       reduce using rule 101 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 62
    Minus           shift and go to state 63


state 94

    (102) additive -> additive Plus multiplicative .
    (104) multiplicative -> multiplicative . Mul unary
    (105) multiplicative -> multiplicative . Div unary
    (106) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 102 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 102 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 102 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 102 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 102 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 102 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 102 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 102 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 102 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 102 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 102 (additive -> additive Plus multiplicative .)
    And             reduce using rule 102 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 102 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 102 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 102 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 102 (additive -> additive Plus multiplicative .)
    Comma           reduce using rule 102 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 102 (additive -> additive Plus multiplicative .)
    RMidBrace       reduce using rule 102 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 64
    Div             shift and go to state 65
    Mod             shift and go to state 66


state 95

    (103) additive -> additive Minus multiplicative .
    (104) multiplicative -> multiplicative . Mul unary
    (105) multiplicative -> multiplicative . Div unary
    (106) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 103 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 103 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 103 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 103 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 103 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 103 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 103 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 103 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 103 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 103 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 103 (additive -> additive Minus multiplicative .)
    And             reduce using rule 103 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 103 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 103 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 103 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 103 (additive -> additive Minus multiplicative .)
    Comma           reduce using rule 103 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 103 (additive -> additive Minus multiplicative .)
    RMidBrace       reduce using rule 103 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 64
    Div             shift and go to state 65
    Mod             shift and go to state 66


state 96

    (104) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    Comma           reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 104 (multiplicative -> multiplicative Mul unary .)
    RMidBrace       reduce using rule 104 (multiplicative -> multiplicative Mul unary .)


state 97

    (105) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    Comma           reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 105 (multiplicative -> multiplicative Div unary .)
    RMidBrace       reduce using rule 105 (multiplicative -> multiplicative Div unary .)


state 98

    (106) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    Comma           reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 106 (multiplicative -> multiplicative Mod unary .)
    RMidBrace       reduce using rule 106 (multiplicative -> multiplicative Mod unary .)


state 99

    (8) globaldeclaration -> type Identifier indexlist Assign expression Semi .

    Int             reduce using rule 8 (globaldeclaration -> type Identifier indexlist Assign expression Semi .)
    $end            reduce using rule 8 (globaldeclaration -> type Identifier indexlist Assign expression Semi .)


state 100

    (67) indexlist -> indexlist LMidBrace Integer RMidBrace .

    Semi            reduce using rule 67 (indexlist -> indexlist LMidBrace Integer RMidBrace .)
    Assign          reduce using rule 67 (indexlist -> indexlist LMidBrace Integer RMidBrace .)
    LMidBrace       reduce using rule 67 (indexlist -> indexlist LMidBrace Integer RMidBrace .)


state 101

    (11) function -> type Identifier LParen parameterlist RParen LBrace block . RBrace
    (19) block -> block . block_item
    (21) block_item -> . statement
    (22) block_item -> . declaration Semi
    (23) statement -> . statement_matched
    (24) statement -> . statement_unmatched
    (63) declaration -> . type Identifier
    (64) declaration -> . type Identifier Assign expression
    (65) declaration -> . type Identifier indexlist
    (66) declaration -> . type Identifier indexlist Assign expression
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (9) type -> . Int
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    RBrace          shift and go to state 109
    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Int             shift and go to state 6
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    type                           shift and go to state 107
    block_item                     shift and go to state 110
    statement                      shift and go to state 111
    declaration                    shift and go to state 112
    statement_matched              shift and go to state 113
    statement_unmatched            shift and go to state 114
    expression                     shift and go to state 115
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 102

    (20) block -> empty .

    RBrace          reduce using rule 20 (block -> empty .)
    If              reduce using rule 20 (block -> empty .)
    While           reduce using rule 20 (block -> empty .)
    For             reduce using rule 20 (block -> empty .)
    Do              reduce using rule 20 (block -> empty .)
    Return          reduce using rule 20 (block -> empty .)
    LBrace          reduce using rule 20 (block -> empty .)
    Break           reduce using rule 20 (block -> empty .)
    Continue        reduce using rule 20 (block -> empty .)
    Int             reduce using rule 20 (block -> empty .)
    Identifier      reduce using rule 20 (block -> empty .)
    Integer         reduce using rule 20 (block -> empty .)
    LParen          reduce using rule 20 (block -> empty .)
    Minus           reduce using rule 20 (block -> empty .)
    BitNot          reduce using rule 20 (block -> empty .)
    Not             reduce using rule 20 (block -> empty .)
    Semi            reduce using rule 20 (block -> empty .)


state 103

    (83) postfix -> Identifier LParen expressionlist RParen .

    Assign          reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    Mul             reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    Div             reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    Mod             reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    Plus            reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    Minus           reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    Less            reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    Greater         reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    LessEqual       reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    GreaterEqual    reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    NotEqual        reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    Equal           reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    BitAnd          reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    Xor             reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    BitOr           reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    And             reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    Question        reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    Or              reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    Semi            reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    RParen          reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    Comma           reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    Colon           reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)
    RMidBrace       reduce using rule 83 (postfix -> Identifier LParen expressionlist RParen .)


state 104

    (18) expressionlist -> expressionlist Comma . expression
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 125
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 105

    (107) conditional -> logical_or Question expression Colon . conditional
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary

    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24

    logical_or                     shift and go to state 22
    conditional                    shift and go to state 126
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36
    postfix                        shift and go to state 68
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25

state 106

    (84) postfix -> postfix_array LMidBrace expression RMidBrace .
    (85) postfix_array -> postfix_array LMidBrace expression RMidBrace .

    Assign          reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    Mul             reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    Div             reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    Mod             reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    Plus            reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    Minus           reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    Less            reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    Greater         reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    LessEqual       reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    GreaterEqual    reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    NotEqual        reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    Equal           reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    BitAnd          reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    Xor             reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    BitOr           reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    And             reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    Question        reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    Or              reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    Semi            reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    RParen          reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    Comma           reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    Colon           reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    RMidBrace       reduce using rule 84 (postfix -> postfix_array LMidBrace expression RMidBrace .)
    LMidBrace       reduce using rule 85 (postfix_array -> postfix_array LMidBrace expression RMidBrace .)


state 107

    (63) declaration -> type . Identifier
    (64) declaration -> type . Identifier Assign expression
    (65) declaration -> type . Identifier indexlist
    (66) declaration -> type . Identifier indexlist Assign expression

    Identifier      shift and go to state 127


state 108

    (58) statement_matched -> LBrace . block RBrace
    (19) block -> . block block_item
    (20) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 128
    empty                          shift and go to state 102

state 109

    (11) function -> type Identifier LParen parameterlist RParen LBrace block RBrace .

    Int             reduce using rule 11 (function -> type Identifier LParen parameterlist RParen LBrace block RBrace .)
    $end            reduce using rule 11 (function -> type Identifier LParen parameterlist RParen LBrace block RBrace .)


state 110

    (19) block -> block block_item .

    RBrace          reduce using rule 19 (block -> block block_item .)
    If              reduce using rule 19 (block -> block block_item .)
    While           reduce using rule 19 (block -> block block_item .)
    For             reduce using rule 19 (block -> block block_item .)
    Do              reduce using rule 19 (block -> block block_item .)
    Return          reduce using rule 19 (block -> block block_item .)
    LBrace          reduce using rule 19 (block -> block block_item .)
    Break           reduce using rule 19 (block -> block block_item .)
    Continue        reduce using rule 19 (block -> block block_item .)
    Int             reduce using rule 19 (block -> block block_item .)
    Identifier      reduce using rule 19 (block -> block block_item .)
    Integer         reduce using rule 19 (block -> block block_item .)
    LParen          reduce using rule 19 (block -> block block_item .)
    Minus           reduce using rule 19 (block -> block block_item .)
    BitNot          reduce using rule 19 (block -> block block_item .)
    Not             reduce using rule 19 (block -> block block_item .)
    Semi            reduce using rule 19 (block -> block block_item .)


state 111

    (21) block_item -> statement .

    RBrace          reduce using rule 21 (block_item -> statement .)
    If              reduce using rule 21 (block_item -> statement .)
    While           reduce using rule 21 (block_item -> statement .)
    For             reduce using rule 21 (block_item -> statement .)
    Do              reduce using rule 21 (block_item -> statement .)
    Return          reduce using rule 21 (block_item -> statement .)
    LBrace          reduce using rule 21 (block_item -> statement .)
    Break           reduce using rule 21 (block_item -> statement .)
    Continue        reduce using rule 21 (block_item -> statement .)
    Int             reduce using rule 21 (block_item -> statement .)
    Identifier      reduce using rule 21 (block_item -> statement .)
    Integer         reduce using rule 21 (block_item -> statement .)
    LParen          reduce using rule 21 (block_item -> statement .)
    Minus           reduce using rule 21 (block_item -> statement .)
    BitNot          reduce using rule 21 (block_item -> statement .)
    Not             reduce using rule 21 (block_item -> statement .)
    Semi            reduce using rule 21 (block_item -> statement .)


state 112

    (22) block_item -> declaration . Semi

    Semi            shift and go to state 129


state 113

    (23) statement -> statement_matched .

    RBrace          reduce using rule 23 (statement -> statement_matched .)
    If              reduce using rule 23 (statement -> statement_matched .)
    While           reduce using rule 23 (statement -> statement_matched .)
    For             reduce using rule 23 (statement -> statement_matched .)
    Do              reduce using rule 23 (statement -> statement_matched .)
    Return          reduce using rule 23 (statement -> statement_matched .)
    LBrace          reduce using rule 23 (statement -> statement_matched .)
    Break           reduce using rule 23 (statement -> statement_matched .)
    Continue        reduce using rule 23 (statement -> statement_matched .)
    Int             reduce using rule 23 (statement -> statement_matched .)
    Identifier      reduce using rule 23 (statement -> statement_matched .)
    Integer         reduce using rule 23 (statement -> statement_matched .)
    LParen          reduce using rule 23 (statement -> statement_matched .)
    Minus           reduce using rule 23 (statement -> statement_matched .)
    BitNot          reduce using rule 23 (statement -> statement_matched .)
    Not             reduce using rule 23 (statement -> statement_matched .)
    Semi            reduce using rule 23 (statement -> statement_matched .)


state 114

    (24) statement -> statement_unmatched .

    RBrace          reduce using rule 24 (statement -> statement_unmatched .)
    If              reduce using rule 24 (statement -> statement_unmatched .)
    While           reduce using rule 24 (statement -> statement_unmatched .)
    For             reduce using rule 24 (statement -> statement_unmatched .)
    Do              reduce using rule 24 (statement -> statement_unmatched .)
    Return          reduce using rule 24 (statement -> statement_unmatched .)
    LBrace          reduce using rule 24 (statement -> statement_unmatched .)
    Break           reduce using rule 24 (statement -> statement_unmatched .)
    Continue        reduce using rule 24 (statement -> statement_unmatched .)
    Int             reduce using rule 24 (statement -> statement_unmatched .)
    Identifier      reduce using rule 24 (statement -> statement_unmatched .)
    Integer         reduce using rule 24 (statement -> statement_unmatched .)
    LParen          reduce using rule 24 (statement -> statement_unmatched .)
    Minus           reduce using rule 24 (statement -> statement_unmatched .)
    BitNot          reduce using rule 24 (statement -> statement_unmatched .)
    Not             reduce using rule 24 (statement -> statement_unmatched .)
    Semi            reduce using rule 24 (statement -> statement_unmatched .)


state 115

    (61) opt_expression -> expression .

    Semi            reduce using rule 61 (opt_expression -> expression .)


state 116

    (25) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (26) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 130


state 117

    (28) statement_matched -> While . LParen expression RParen statement_matched
    (29) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 131


state 118

    (30) statement_matched -> For . LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> For . LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> For . LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> For . LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> For . LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> For . LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> For . LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> For . LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> For . LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> For . LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> For . LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> For . LParen Semi Semi RParen statement_matched
    (32) statement_unmatched -> For . LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> For . LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> For . LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> For . LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> For . LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> For . LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> For . LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> For . LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> For . LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> For . LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> For . LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> For . LParen Semi Semi RParen statement_unmatched

    LParen          shift and go to state 132


state 119

    (54) statement_matched -> Do . statement_matched While LParen expression RParen Semi
    (55) statement_unmatched -> Do . statement_unmatched While LParen expression RParen Semi
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    statement_matched              shift and go to state 133
    expression                     shift and go to state 115
    statement_unmatched            shift and go to state 134
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 120

    (56) statement_matched -> Return . expression Semi
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 135
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 121

    (57) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 136


state 122

    (59) statement_matched -> Break . Semi

    Semi            shift and go to state 137


state 123

    (60) statement_matched -> Continue . Semi

    Semi            shift and go to state 138


state 124

    (62) opt_expression -> empty .

    Semi            reduce using rule 62 (opt_expression -> empty .)


state 125

    (18) expressionlist -> expressionlist Comma expression .

    RParen          reduce using rule 18 (expressionlist -> expressionlist Comma expression .)
    Comma           reduce using rule 18 (expressionlist -> expressionlist Comma expression .)


state 126

    (107) conditional -> logical_or Question expression Colon conditional .

    Semi            reduce using rule 107 (conditional -> logical_or Question expression Colon conditional .)
    RParen          reduce using rule 107 (conditional -> logical_or Question expression Colon conditional .)
    Comma           reduce using rule 107 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 107 (conditional -> logical_or Question expression Colon conditional .)
    RMidBrace       reduce using rule 107 (conditional -> logical_or Question expression Colon conditional .)


state 127

    (63) declaration -> type Identifier .
    (64) declaration -> type Identifier . Assign expression
    (65) declaration -> type Identifier . indexlist
    (66) declaration -> type Identifier . indexlist Assign expression
    (67) indexlist -> . indexlist LMidBrace Integer RMidBrace
    (68) indexlist -> . empty
    (1) empty -> .

  ! shift/reduce conflict for Assign resolved as shift
  ! reduce/reduce conflict for Semi resolved using rule 1 (empty -> .)
    Assign          shift and go to state 139
    LMidBrace       reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

  ! Semi            [ reduce using rule 63 (declaration -> type Identifier .) ]
  ! Assign          [ reduce using rule 1 (empty -> .) ]

    indexlist                      shift and go to state 140
    empty                          shift and go to state 12

state 128

    (58) statement_matched -> LBrace block . RBrace
    (19) block -> block . block_item
    (21) block_item -> . statement
    (22) block_item -> . declaration Semi
    (23) statement -> . statement_matched
    (24) statement -> . statement_unmatched
    (63) declaration -> . type Identifier
    (64) declaration -> . type Identifier Assign expression
    (65) declaration -> . type Identifier indexlist
    (66) declaration -> . type Identifier indexlist Assign expression
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (9) type -> . Int
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    RBrace          shift and go to state 141
    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Int             shift and go to state 6
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    block_item                     shift and go to state 110
    statement                      shift and go to state 111
    declaration                    shift and go to state 112
    statement_matched              shift and go to state 113
    statement_unmatched            shift and go to state 114
    type                           shift and go to state 107
    expression                     shift and go to state 115
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 129

    (22) block_item -> declaration Semi .

    RBrace          reduce using rule 22 (block_item -> declaration Semi .)
    If              reduce using rule 22 (block_item -> declaration Semi .)
    While           reduce using rule 22 (block_item -> declaration Semi .)
    For             reduce using rule 22 (block_item -> declaration Semi .)
    Do              reduce using rule 22 (block_item -> declaration Semi .)
    Return          reduce using rule 22 (block_item -> declaration Semi .)
    LBrace          reduce using rule 22 (block_item -> declaration Semi .)
    Break           reduce using rule 22 (block_item -> declaration Semi .)
    Continue        reduce using rule 22 (block_item -> declaration Semi .)
    Int             reduce using rule 22 (block_item -> declaration Semi .)
    Identifier      reduce using rule 22 (block_item -> declaration Semi .)
    Integer         reduce using rule 22 (block_item -> declaration Semi .)
    LParen          reduce using rule 22 (block_item -> declaration Semi .)
    Minus           reduce using rule 22 (block_item -> declaration Semi .)
    BitNot          reduce using rule 22 (block_item -> declaration Semi .)
    Not             reduce using rule 22 (block_item -> declaration Semi .)
    Semi            reduce using rule 22 (block_item -> declaration Semi .)


state 130

    (25) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (26) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> If LParen . expression RParen statement
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 142
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 131

    (28) statement_matched -> While LParen . expression RParen statement_matched
    (29) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 143
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 132

    (30) statement_matched -> For LParen . expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> For LParen . declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> For LParen . Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> For LParen . expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> For LParen . declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> For LParen . expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> For LParen . declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> For LParen . expression Semi Semi RParen statement_matched
    (45) statement_matched -> For LParen . declaration Semi Semi RParen statement_matched
    (48) statement_matched -> For LParen . Semi expression Semi RParen statement_matched
    (50) statement_matched -> For LParen . Semi Semi expression RParen statement_matched
    (52) statement_matched -> For LParen . Semi Semi RParen statement_matched
    (32) statement_unmatched -> For LParen . expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> For LParen . declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> For LParen . Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> For LParen . expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> For LParen . declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> For LParen . expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> For LParen . declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> For LParen . expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> For LParen . declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> For LParen . Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> For LParen . Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> For LParen . Semi Semi RParen statement_unmatched
    (69) expression -> . assignment
    (63) declaration -> . type Identifier
    (64) declaration -> . type Identifier Assign expression
    (65) declaration -> . type Identifier indexlist
    (66) declaration -> . type Identifier indexlist Assign expression
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (9) type -> . Int
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Semi            shift and go to state 145
    Int             shift and go to state 6
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 144
    declaration                    shift and go to state 146
    assignment                     shift and go to state 19
    type                           shift and go to state 107
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 133

    (54) statement_matched -> Do statement_matched . While LParen expression RParen Semi

    While           shift and go to state 147


state 134

    (55) statement_unmatched -> Do statement_unmatched . While LParen expression RParen Semi

    While           shift and go to state 148


state 135

    (56) statement_matched -> Return expression . Semi

    Semi            shift and go to state 149


state 136

    (57) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 57 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 57 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 57 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 57 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 57 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 57 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 57 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 57 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 57 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 57 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 57 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 57 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 57 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 57 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 57 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 57 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 57 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 57 (statement_matched -> opt_expression Semi .)


state 137

    (59) statement_matched -> Break Semi .

    RBrace          reduce using rule 59 (statement_matched -> Break Semi .)
    If              reduce using rule 59 (statement_matched -> Break Semi .)
    While           reduce using rule 59 (statement_matched -> Break Semi .)
    For             reduce using rule 59 (statement_matched -> Break Semi .)
    Do              reduce using rule 59 (statement_matched -> Break Semi .)
    Return          reduce using rule 59 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 59 (statement_matched -> Break Semi .)
    Break           reduce using rule 59 (statement_matched -> Break Semi .)
    Continue        reduce using rule 59 (statement_matched -> Break Semi .)
    Int             reduce using rule 59 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 59 (statement_matched -> Break Semi .)
    Integer         reduce using rule 59 (statement_matched -> Break Semi .)
    LParen          reduce using rule 59 (statement_matched -> Break Semi .)
    Minus           reduce using rule 59 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 59 (statement_matched -> Break Semi .)
    Not             reduce using rule 59 (statement_matched -> Break Semi .)
    Semi            reduce using rule 59 (statement_matched -> Break Semi .)
    Else            reduce using rule 59 (statement_matched -> Break Semi .)


state 138

    (60) statement_matched -> Continue Semi .

    RBrace          reduce using rule 60 (statement_matched -> Continue Semi .)
    If              reduce using rule 60 (statement_matched -> Continue Semi .)
    While           reduce using rule 60 (statement_matched -> Continue Semi .)
    For             reduce using rule 60 (statement_matched -> Continue Semi .)
    Do              reduce using rule 60 (statement_matched -> Continue Semi .)
    Return          reduce using rule 60 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 60 (statement_matched -> Continue Semi .)
    Break           reduce using rule 60 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 60 (statement_matched -> Continue Semi .)
    Int             reduce using rule 60 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 60 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 60 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 60 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 60 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 60 (statement_matched -> Continue Semi .)
    Not             reduce using rule 60 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 60 (statement_matched -> Continue Semi .)
    Else            reduce using rule 60 (statement_matched -> Continue Semi .)


state 139

    (64) declaration -> type Identifier Assign . expression
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 150
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 140

    (65) declaration -> type Identifier indexlist .
    (66) declaration -> type Identifier indexlist . Assign expression
    (67) indexlist -> indexlist . LMidBrace Integer RMidBrace

    Semi            reduce using rule 65 (declaration -> type Identifier indexlist .)
    Assign          shift and go to state 151
    LMidBrace       shift and go to state 41


state 141

    (58) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 58 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 58 (statement_matched -> LBrace block RBrace .)


state 142

    (25) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (26) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 152


state 143

    (28) statement_matched -> While LParen expression . RParen statement_matched
    (29) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 153


state 144

    (30) statement_matched -> For LParen expression . Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> For LParen expression . Semi Semi expression RParen statement_matched
    (40) statement_matched -> For LParen expression . Semi expression Semi RParen statement_matched
    (44) statement_matched -> For LParen expression . Semi Semi RParen statement_matched
    (32) statement_unmatched -> For LParen expression . Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> For LParen expression . Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> For LParen expression . Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> For LParen expression . Semi Semi RParen statement_unmatched

    Semi            shift and go to state 154


state 145

    (34) statement_matched -> For LParen Semi . expression Semi expression RParen statement_matched
    (48) statement_matched -> For LParen Semi . expression Semi RParen statement_matched
    (50) statement_matched -> For LParen Semi . Semi expression RParen statement_matched
    (52) statement_matched -> For LParen Semi . Semi RParen statement_matched
    (35) statement_unmatched -> For LParen Semi . expression Semi expression RParen statement_unmatched
    (49) statement_unmatched -> For LParen Semi . expression Semi RParen statement_unmatched
    (51) statement_unmatched -> For LParen Semi . Semi expression RParen statement_unmatched
    (53) statement_unmatched -> For LParen Semi . Semi RParen statement_unmatched
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Semi            shift and go to state 155
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 156
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 146

    (31) statement_matched -> For LParen declaration . Semi expression Semi expression RParen statement_matched
    (37) statement_matched -> For LParen declaration . Semi Semi expression RParen statement_matched
    (41) statement_matched -> For LParen declaration . Semi expression Semi RParen statement_matched
    (45) statement_matched -> For LParen declaration . Semi Semi RParen statement_matched
    (33) statement_unmatched -> For LParen declaration . Semi expression Semi expression RParen statement_unmatched
    (39) statement_unmatched -> For LParen declaration . Semi Semi expression RParen statement_unmatched
    (43) statement_unmatched -> For LParen declaration . Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> For LParen declaration . Semi Semi RParen statement_unmatched

    Semi            shift and go to state 157


state 147

    (54) statement_matched -> Do statement_matched While . LParen expression RParen Semi

    LParen          shift and go to state 158


state 148

    (55) statement_unmatched -> Do statement_unmatched While . LParen expression RParen Semi

    LParen          shift and go to state 159


state 149

    (56) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 56 (statement_matched -> Return expression Semi .)
    If              reduce using rule 56 (statement_matched -> Return expression Semi .)
    While           reduce using rule 56 (statement_matched -> Return expression Semi .)
    For             reduce using rule 56 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 56 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 56 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 56 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 56 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 56 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 56 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 56 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 56 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 56 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 56 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 56 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 56 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 56 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 56 (statement_matched -> Return expression Semi .)


state 150

    (64) declaration -> type Identifier Assign expression .

    Semi            reduce using rule 64 (declaration -> type Identifier Assign expression .)


state 151

    (66) declaration -> type Identifier indexlist Assign . expression
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 160
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 152

    (25) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (26) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (27) statement_unmatched -> If LParen expression RParen . statement
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (23) statement -> . statement_matched
    (24) statement -> . statement_unmatched
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 115
    statement_matched              shift and go to state 161
    statement_unmatched            shift and go to state 114
    statement                      shift and go to state 162
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 153

    (28) statement_matched -> While LParen expression RParen . statement_matched
    (29) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 115
    statement_matched              shift and go to state 163
    statement_unmatched            shift and go to state 164
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 154

    (30) statement_matched -> For LParen expression Semi . expression Semi expression RParen statement_matched
    (36) statement_matched -> For LParen expression Semi . Semi expression RParen statement_matched
    (40) statement_matched -> For LParen expression Semi . expression Semi RParen statement_matched
    (44) statement_matched -> For LParen expression Semi . Semi RParen statement_matched
    (32) statement_unmatched -> For LParen expression Semi . expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> For LParen expression Semi . Semi expression RParen statement_unmatched
    (42) statement_unmatched -> For LParen expression Semi . expression Semi RParen statement_unmatched
    (46) statement_unmatched -> For LParen expression Semi . Semi RParen statement_unmatched
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Semi            shift and go to state 166
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 165
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 155

    (50) statement_matched -> For LParen Semi Semi . expression RParen statement_matched
    (52) statement_matched -> For LParen Semi Semi . RParen statement_matched
    (51) statement_unmatched -> For LParen Semi Semi . expression RParen statement_unmatched
    (53) statement_unmatched -> For LParen Semi Semi . RParen statement_unmatched
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    RParen          shift and go to state 168
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 167
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 156

    (34) statement_matched -> For LParen Semi expression . Semi expression RParen statement_matched
    (48) statement_matched -> For LParen Semi expression . Semi RParen statement_matched
    (35) statement_unmatched -> For LParen Semi expression . Semi expression RParen statement_unmatched
    (49) statement_unmatched -> For LParen Semi expression . Semi RParen statement_unmatched

    Semi            shift and go to state 169


state 157

    (31) statement_matched -> For LParen declaration Semi . expression Semi expression RParen statement_matched
    (37) statement_matched -> For LParen declaration Semi . Semi expression RParen statement_matched
    (41) statement_matched -> For LParen declaration Semi . expression Semi RParen statement_matched
    (45) statement_matched -> For LParen declaration Semi . Semi RParen statement_matched
    (33) statement_unmatched -> For LParen declaration Semi . expression Semi expression RParen statement_unmatched
    (39) statement_unmatched -> For LParen declaration Semi . Semi expression RParen statement_unmatched
    (43) statement_unmatched -> For LParen declaration Semi . expression Semi RParen statement_unmatched
    (47) statement_unmatched -> For LParen declaration Semi . Semi RParen statement_unmatched
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Semi            shift and go to state 170
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 171
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 158

    (54) statement_matched -> Do statement_matched While LParen . expression RParen Semi
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 172
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 159

    (55) statement_unmatched -> Do statement_unmatched While LParen . expression RParen Semi
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 173
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 160

    (66) declaration -> type Identifier indexlist Assign expression .

    Semi            reduce using rule 66 (declaration -> type Identifier indexlist Assign expression .)


state 161

    (25) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (26) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (23) statement -> statement_matched .

    Else            shift and go to state 174
    RBrace          reduce using rule 23 (statement -> statement_matched .)
    If              reduce using rule 23 (statement -> statement_matched .)
    While           reduce using rule 23 (statement -> statement_matched .)
    For             reduce using rule 23 (statement -> statement_matched .)
    Do              reduce using rule 23 (statement -> statement_matched .)
    Return          reduce using rule 23 (statement -> statement_matched .)
    LBrace          reduce using rule 23 (statement -> statement_matched .)
    Break           reduce using rule 23 (statement -> statement_matched .)
    Continue        reduce using rule 23 (statement -> statement_matched .)
    Int             reduce using rule 23 (statement -> statement_matched .)
    Identifier      reduce using rule 23 (statement -> statement_matched .)
    Integer         reduce using rule 23 (statement -> statement_matched .)
    LParen          reduce using rule 23 (statement -> statement_matched .)
    Minus           reduce using rule 23 (statement -> statement_matched .)
    BitNot          reduce using rule 23 (statement -> statement_matched .)
    Not             reduce using rule 23 (statement -> statement_matched .)
    Semi            reduce using rule 23 (statement -> statement_matched .)


state 162

    (27) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 27 (statement_unmatched -> If LParen expression RParen statement .)


state 163

    (28) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 28 (statement_matched -> While LParen expression RParen statement_matched .)


state 164

    (29) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 29 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 165

    (30) statement_matched -> For LParen expression Semi expression . Semi expression RParen statement_matched
    (40) statement_matched -> For LParen expression Semi expression . Semi RParen statement_matched
    (32) statement_unmatched -> For LParen expression Semi expression . Semi expression RParen statement_unmatched
    (42) statement_unmatched -> For LParen expression Semi expression . Semi RParen statement_unmatched

    Semi            shift and go to state 175


state 166

    (36) statement_matched -> For LParen expression Semi Semi . expression RParen statement_matched
    (44) statement_matched -> For LParen expression Semi Semi . RParen statement_matched
    (38) statement_unmatched -> For LParen expression Semi Semi . expression RParen statement_unmatched
    (46) statement_unmatched -> For LParen expression Semi Semi . RParen statement_unmatched
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    RParen          shift and go to state 177
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 176
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 167

    (50) statement_matched -> For LParen Semi Semi expression . RParen statement_matched
    (51) statement_unmatched -> For LParen Semi Semi expression . RParen statement_unmatched

    RParen          shift and go to state 178


state 168

    (52) statement_matched -> For LParen Semi Semi RParen . statement_matched
    (53) statement_unmatched -> For LParen Semi Semi RParen . statement_unmatched
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    statement_matched              shift and go to state 179
    statement_unmatched            shift and go to state 180
    expression                     shift and go to state 115
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 169

    (34) statement_matched -> For LParen Semi expression Semi . expression RParen statement_matched
    (48) statement_matched -> For LParen Semi expression Semi . RParen statement_matched
    (35) statement_unmatched -> For LParen Semi expression Semi . expression RParen statement_unmatched
    (49) statement_unmatched -> For LParen Semi expression Semi . RParen statement_unmatched
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    RParen          shift and go to state 182
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 181
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 170

    (37) statement_matched -> For LParen declaration Semi Semi . expression RParen statement_matched
    (45) statement_matched -> For LParen declaration Semi Semi . RParen statement_matched
    (39) statement_unmatched -> For LParen declaration Semi Semi . expression RParen statement_unmatched
    (47) statement_unmatched -> For LParen declaration Semi Semi . RParen statement_unmatched
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    RParen          shift and go to state 184
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 183
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 171

    (31) statement_matched -> For LParen declaration Semi expression . Semi expression RParen statement_matched
    (41) statement_matched -> For LParen declaration Semi expression . Semi RParen statement_matched
    (33) statement_unmatched -> For LParen declaration Semi expression . Semi expression RParen statement_unmatched
    (43) statement_unmatched -> For LParen declaration Semi expression . Semi RParen statement_unmatched

    Semi            shift and go to state 185


state 172

    (54) statement_matched -> Do statement_matched While LParen expression . RParen Semi

    RParen          shift and go to state 186


state 173

    (55) statement_unmatched -> Do statement_unmatched While LParen expression . RParen Semi

    RParen          shift and go to state 187


state 174

    (25) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (26) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 115
    statement_matched              shift and go to state 188
    statement_unmatched            shift and go to state 189
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 175

    (30) statement_matched -> For LParen expression Semi expression Semi . expression RParen statement_matched
    (40) statement_matched -> For LParen expression Semi expression Semi . RParen statement_matched
    (32) statement_unmatched -> For LParen expression Semi expression Semi . expression RParen statement_unmatched
    (42) statement_unmatched -> For LParen expression Semi expression Semi . RParen statement_unmatched
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    RParen          shift and go to state 191
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 190
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 176

    (36) statement_matched -> For LParen expression Semi Semi expression . RParen statement_matched
    (38) statement_unmatched -> For LParen expression Semi Semi expression . RParen statement_unmatched

    RParen          shift and go to state 192


state 177

    (44) statement_matched -> For LParen expression Semi Semi RParen . statement_matched
    (46) statement_unmatched -> For LParen expression Semi Semi RParen . statement_unmatched
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 115
    statement_matched              shift and go to state 193
    statement_unmatched            shift and go to state 194
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 178

    (50) statement_matched -> For LParen Semi Semi expression RParen . statement_matched
    (51) statement_unmatched -> For LParen Semi Semi expression RParen . statement_unmatched
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 115
    statement_matched              shift and go to state 195
    statement_unmatched            shift and go to state 196
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 179

    (52) statement_matched -> For LParen Semi Semi RParen statement_matched .

    RBrace          reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    If              reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    While           reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    For             reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Do              reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Return          reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    LBrace          reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Break           reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Continue        reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Int             reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Identifier      reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Integer         reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    LParen          reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Minus           reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    BitNot          reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Not             reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Semi            reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Else            reduce using rule 52 (statement_matched -> For LParen Semi Semi RParen statement_matched .)


state 180

    (53) statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .

    RBrace          reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    If              reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    While           reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    For             reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Do              reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Return          reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    LBrace          reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Break           reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Continue        reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Int             reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Identifier      reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Integer         reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    LParen          reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Minus           reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    BitNot          reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Not             reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Semi            reduce using rule 53 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)


state 181

    (34) statement_matched -> For LParen Semi expression Semi expression . RParen statement_matched
    (35) statement_unmatched -> For LParen Semi expression Semi expression . RParen statement_unmatched

    RParen          shift and go to state 197


state 182

    (48) statement_matched -> For LParen Semi expression Semi RParen . statement_matched
    (49) statement_unmatched -> For LParen Semi expression Semi RParen . statement_unmatched
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 115
    statement_matched              shift and go to state 198
    statement_unmatched            shift and go to state 199
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 183

    (37) statement_matched -> For LParen declaration Semi Semi expression . RParen statement_matched
    (39) statement_unmatched -> For LParen declaration Semi Semi expression . RParen statement_unmatched

    RParen          shift and go to state 200


state 184

    (45) statement_matched -> For LParen declaration Semi Semi RParen . statement_matched
    (47) statement_unmatched -> For LParen declaration Semi Semi RParen . statement_unmatched
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    statement_matched              shift and go to state 201
    statement_unmatched            shift and go to state 202
    expression                     shift and go to state 115
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 185

    (31) statement_matched -> For LParen declaration Semi expression Semi . expression RParen statement_matched
    (41) statement_matched -> For LParen declaration Semi expression Semi . RParen statement_matched
    (33) statement_unmatched -> For LParen declaration Semi expression Semi . expression RParen statement_unmatched
    (43) statement_unmatched -> For LParen declaration Semi expression Semi . RParen statement_unmatched
    (69) expression -> . assignment
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    RParen          shift and go to state 204
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 203
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 186

    (54) statement_matched -> Do statement_matched While LParen expression RParen . Semi

    Semi            shift and go to state 205


state 187

    (55) statement_unmatched -> Do statement_unmatched While LParen expression RParen . Semi

    Semi            shift and go to state 206


state 188

    (25) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 25 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 189

    (26) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 26 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)


state 190

    (30) statement_matched -> For LParen expression Semi expression Semi expression . RParen statement_matched
    (32) statement_unmatched -> For LParen expression Semi expression Semi expression . RParen statement_unmatched

    RParen          shift and go to state 207


state 191

    (40) statement_matched -> For LParen expression Semi expression Semi RParen . statement_matched
    (42) statement_unmatched -> For LParen expression Semi expression Semi RParen . statement_unmatched
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 115
    statement_matched              shift and go to state 208
    statement_unmatched            shift and go to state 209
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 192

    (36) statement_matched -> For LParen expression Semi Semi expression RParen . statement_matched
    (38) statement_unmatched -> For LParen expression Semi Semi expression RParen . statement_unmatched
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 115
    statement_matched              shift and go to state 210
    statement_unmatched            shift and go to state 211
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 193

    (44) statement_matched -> For LParen expression Semi Semi RParen statement_matched .

    RBrace          reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    If              reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    While           reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    For             reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Do              reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Return          reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    LBrace          reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Break           reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Continue        reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Int             reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Identifier      reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Integer         reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    LParen          reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Minus           reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    BitNot          reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Not             reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Semi            reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Else            reduce using rule 44 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)


state 194

    (46) statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .

    RBrace          reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    If              reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    While           reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    For             reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Do              reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Return          reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    LBrace          reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Break           reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Continue        reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Int             reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Identifier      reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Integer         reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    LParen          reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Minus           reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    BitNot          reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Not             reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Semi            reduce using rule 46 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)


state 195

    (50) statement_matched -> For LParen Semi Semi expression RParen statement_matched .

    RBrace          reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    If              reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    While           reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    For             reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Do              reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Return          reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    LBrace          reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Break           reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Continue        reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Int             reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Identifier      reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Integer         reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    LParen          reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Minus           reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    BitNot          reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Not             reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Semi            reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Else            reduce using rule 50 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)


state 196

    (51) statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    If              reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    While           reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    For             reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Do              reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Return          reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Break           reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Int             reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Not             reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 51 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)


state 197

    (34) statement_matched -> For LParen Semi expression Semi expression RParen . statement_matched
    (35) statement_unmatched -> For LParen Semi expression Semi expression RParen . statement_unmatched
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 115
    statement_matched              shift and go to state 212
    statement_unmatched            shift and go to state 213
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 198

    (48) statement_matched -> For LParen Semi expression Semi RParen statement_matched .

    RBrace          reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    If              reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    While           reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    For             reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Do              reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Return          reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    LBrace          reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Break           reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Continue        reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Int             reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Identifier      reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Integer         reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    LParen          reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Minus           reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    BitNot          reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Not             reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Semi            reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Else            reduce using rule 48 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)


state 199

    (49) statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .

    RBrace          reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    If              reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    While           reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    For             reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Do              reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Return          reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    LBrace          reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Break           reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Continue        reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Int             reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Identifier      reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Integer         reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    LParen          reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Minus           reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    BitNot          reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Not             reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Semi            reduce using rule 49 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)


state 200

    (37) statement_matched -> For LParen declaration Semi Semi expression RParen . statement_matched
    (39) statement_unmatched -> For LParen declaration Semi Semi expression RParen . statement_unmatched
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 115
    statement_matched              shift and go to state 214
    statement_unmatched            shift and go to state 215
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 201

    (45) statement_matched -> For LParen declaration Semi Semi RParen statement_matched .

    RBrace          reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    If              reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    While           reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    For             reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Do              reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Return          reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    LBrace          reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Break           reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Continue        reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Int             reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Identifier      reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Integer         reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    LParen          reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Minus           reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    BitNot          reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Not             reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Semi            reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Else            reduce using rule 45 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)


state 202

    (47) statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .

    RBrace          reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    If              reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    While           reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    For             reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Do              reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Return          reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    LBrace          reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Break           reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Continue        reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Int             reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Identifier      reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Integer         reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    LParen          reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Minus           reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    BitNot          reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Not             reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Semi            reduce using rule 47 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)


state 203

    (31) statement_matched -> For LParen declaration Semi expression Semi expression . RParen statement_matched
    (33) statement_unmatched -> For LParen declaration Semi expression Semi expression . RParen statement_unmatched

    RParen          shift and go to state 216


state 204

    (41) statement_matched -> For LParen declaration Semi expression Semi RParen . statement_matched
    (43) statement_unmatched -> For LParen declaration Semi expression Semi RParen . statement_unmatched
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 115
    statement_matched              shift and go to state 217
    statement_unmatched            shift and go to state 218
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 205

    (54) statement_matched -> Do statement_matched While LParen expression RParen Semi .

    RBrace          reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    If              reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    While           reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    For             reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Do              reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Return          reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LBrace          reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Break           reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Continue        reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Int             reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Identifier      reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Integer         reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LParen          reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Minus           reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    BitNot          reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Not             reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Semi            reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Else            reduce using rule 54 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)


state 206

    (55) statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .

    RBrace          reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    If              reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    While           reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    For             reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Do              reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Return          reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LBrace          reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Break           reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Continue        reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Int             reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Identifier      reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Integer         reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LParen          reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Minus           reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    BitNot          reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Not             reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Semi            reduce using rule 55 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)


state 207

    (30) statement_matched -> For LParen expression Semi expression Semi expression RParen . statement_matched
    (32) statement_unmatched -> For LParen expression Semi expression Semi expression RParen . statement_unmatched
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 115
    statement_matched              shift and go to state 219
    statement_unmatched            shift and go to state 220
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 208

    (40) statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .

    RBrace          reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    If              reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    While           reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    For             reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Do              reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Return          reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    LBrace          reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Break           reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Continue        reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Int             reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Identifier      reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Integer         reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    LParen          reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Minus           reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    BitNot          reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Not             reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Semi            reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Else            reduce using rule 40 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)


state 209

    (42) statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .

    RBrace          reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    If              reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    While           reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    For             reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Do              reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Return          reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    LBrace          reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Break           reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Continue        reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Int             reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Identifier      reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Integer         reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    LParen          reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Minus           reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    BitNot          reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Not             reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Semi            reduce using rule 42 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)


state 210

    (36) statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .

    RBrace          reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    If              reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    While           reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    For             reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Do              reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Return          reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    LBrace          reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Break           reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Continue        reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Int             reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Identifier      reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Integer         reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    LParen          reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Minus           reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    BitNot          reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Not             reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Semi            reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Else            reduce using rule 36 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)


state 211

    (38) statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    If              reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    While           reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    For             reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Do              reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Return          reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Break           reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Int             reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Not             reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 38 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)


state 212

    (34) statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .

    RBrace          reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    If              reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    While           reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    For             reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Do              reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Return          reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    LBrace          reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Break           reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Continue        reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Int             reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Identifier      reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Integer         reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    LParen          reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Minus           reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    BitNot          reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Not             reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Semi            reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Else            reduce using rule 34 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)


state 213

    (35) statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    If              reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    While           reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    For             reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Do              reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Return          reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Break           reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Int             reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Not             reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 35 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)


state 214

    (37) statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .

    RBrace          reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    If              reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    While           reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    For             reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Do              reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Return          reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    LBrace          reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Break           reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Continue        reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Int             reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Identifier      reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Integer         reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    LParen          reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Minus           reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    BitNot          reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Not             reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Semi            reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Else            reduce using rule 37 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)


state 215

    (39) statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    If              reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    While           reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    For             reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Do              reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Return          reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Break           reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Int             reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Not             reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 39 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)


state 216

    (31) statement_matched -> For LParen declaration Semi expression Semi expression RParen . statement_matched
    (33) statement_unmatched -> For LParen declaration Semi expression Semi expression RParen . statement_unmatched
    (25) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (28) statement_matched -> . While LParen expression RParen statement_matched
    (30) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (31) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (34) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (44) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (45) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (48) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (50) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (52) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (54) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (56) statement_matched -> . Return expression Semi
    (57) statement_matched -> . opt_expression Semi
    (58) statement_matched -> . LBrace block RBrace
    (59) statement_matched -> . Break Semi
    (60) statement_matched -> . Continue Semi
    (26) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (27) statement_unmatched -> . If LParen expression RParen statement
    (29) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (32) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (33) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (46) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (51) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (53) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (61) opt_expression -> . expression
    (62) opt_expression -> . empty
    (69) expression -> . assignment
    (1) empty -> .
    (70) assignment -> . conditional
    (90) assignment -> . postfix Assign expression
    (71) conditional -> . logical_or
    (107) conditional -> . logical_or Question expression Colon conditional
    (82) postfix -> . primary
    (83) postfix -> . Identifier LParen expressionlist RParen
    (84) postfix -> . postfix_array LMidBrace expression RMidBrace
    (72) logical_or -> . logical_and
    (91) logical_or -> . logical_or Or logical_and
    (108) primary -> . Integer
    (109) primary -> . Identifier
    (110) primary -> . LParen expression RParen
    (85) postfix_array -> . postfix_array LMidBrace expression RMidBrace
    (86) postfix_array -> . primary
    (73) logical_and -> . bit_or
    (92) logical_and -> . logical_and And bit_or
    (74) bit_or -> . xor
    (93) bit_or -> . bit_or BitOr xor
    (75) xor -> . bit_and
    (94) xor -> . xor Xor bit_and
    (76) bit_and -> . equality
    (95) bit_and -> . bit_and BitAnd equality
    (77) equality -> . relational
    (96) equality -> . equality NotEqual relational
    (97) equality -> . equality Equal relational
    (78) relational -> . additive
    (98) relational -> . relational Less additive
    (99) relational -> . relational Greater additive
    (100) relational -> . relational LessEqual additive
    (101) relational -> . relational GreaterEqual additive
    (79) additive -> . multiplicative
    (102) additive -> . additive Plus multiplicative
    (103) additive -> . additive Minus multiplicative
    (80) multiplicative -> . unary
    (104) multiplicative -> . multiplicative Mul unary
    (105) multiplicative -> . multiplicative Div unary
    (106) multiplicative -> . multiplicative Mod unary
    (81) unary -> . postfix
    (87) unary -> . Minus unary
    (88) unary -> . BitNot unary
    (89) unary -> . Not unary

    If              shift and go to state 116
    While           shift and go to state 117
    For             shift and go to state 118
    Do              shift and go to state 119
    Return          shift and go to state 120
    LBrace          shift and go to state 108
    Break           shift and go to state 122
    Continue        shift and go to state 123
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Integer         shift and go to state 27
    LParen          shift and go to state 24
    Minus           shift and go to state 35
    BitNot          shift and go to state 37
    Not             shift and go to state 38

    expression                     shift and go to state 115
    statement_matched              shift and go to state 221
    statement_unmatched            shift and go to state 222
    opt_expression                 shift and go to state 121
    empty                          shift and go to state 124
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    postfix                        shift and go to state 21
    logical_or                     shift and go to state 22
    primary                        shift and go to state 23
    postfix_array                  shift and go to state 25
    logical_and                    shift and go to state 26
    bit_or                         shift and go to state 28
    xor                            shift and go to state 29
    bit_and                        shift and go to state 30
    equality                       shift and go to state 31
    relational                     shift and go to state 32
    additive                       shift and go to state 33
    multiplicative                 shift and go to state 34
    unary                          shift and go to state 36

state 217

    (41) statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .

    RBrace          reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    If              reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    While           reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    For             reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Do              reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Return          reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    LBrace          reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Break           reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Continue        reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Int             reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Identifier      reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Integer         reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    LParen          reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Minus           reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    BitNot          reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Not             reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Semi            reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Else            reduce using rule 41 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)


state 218

    (43) statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .

    RBrace          reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    If              reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    While           reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    For             reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Do              reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Return          reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    LBrace          reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Break           reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Continue        reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Int             reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Identifier      reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Integer         reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    LParen          reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Minus           reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    BitNot          reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Not             reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Semi            reduce using rule 43 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)


state 219

    (30) statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .

    RBrace          reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    If              reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    While           reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    For             reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Do              reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Return          reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    LBrace          reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Break           reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Continue        reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Int             reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Identifier      reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Integer         reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    LParen          reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Minus           reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    BitNot          reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Not             reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Semi            reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Else            reduce using rule 30 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)


state 220

    (32) statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    If              reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    While           reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    For             reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Do              reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Return          reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Break           reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Int             reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Not             reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 32 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)


state 221

    (31) statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .

    RBrace          reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    If              reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    While           reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    For             reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Do              reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Return          reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    LBrace          reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Break           reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Continue        reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Int             reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Identifier      reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Integer         reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    LParen          reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Minus           reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    BitNot          reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Not             reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Semi            reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Else            reduce using rule 31 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)


state 222

    (33) statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    If              reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    While           reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    For             reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Do              reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Return          reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Break           reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Int             reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Not             reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 33 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for Semi in state 7 resolved as shift
WARNING: shift/reduce conflict for Assign in state 7 resolved as shift
WARNING: shift/reduce conflict for Assign in state 127 resolved as shift
WARNING: reduce/reduce conflict in state 127 resolved using rule (empty -> <empty>)
WARNING: rejected rule (declaration -> type Identifier) in state 127
WARNING: Rule (declaration -> type Identifier) is never reduced
